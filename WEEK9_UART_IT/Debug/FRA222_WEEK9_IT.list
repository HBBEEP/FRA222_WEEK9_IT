
FRA222_WEEK9_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a70  08004a70  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a78  08004a78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000078  08004af8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004af8  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fc8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001717  00000000  00000000  00029070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0002a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000698  00000000  00000000  0002aea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008daa  00000000  00000000  00040eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ec3  00000000  00000000  00049c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cfb20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002008  00000000  00000000  000cfb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800474c 	.word	0x0800474c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800474c 	.word	0x0800474c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000598:	f000 fe48 	bl	800122c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059c:	f000 f824 	bl	80005e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a0:	f000 f8de 	bl	8000760 <MX_GPIO_Init>
	MX_DMA_Init();
 80005a4:	f000 f8b4 	bl	8000710 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80005a8:	f000 f888 	bl	80006bc <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	homePage();
 80005ac:	f000 fa98 	bl	8000ae0 <homePage>
	UARTDMAConfig();
 80005b0:	f000 f944 	bl	800083c <UARTDMAConfig>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (ledSwitch) {
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <main+0x48>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <main+0x2e>
			DummyTask();
 80005bc:	f000 fc68 	bl	8000e90 <DummyTask>
 80005c0:	e004      	b.n	80005cc <main+0x38>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <main+0x4c>)
 80005c8:	f001 fd52 	bl	8002070 <HAL_GPIO_WritePin>
		}
		if (state == 2) {
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <main+0x50>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d1ef      	bne.n	80005b4 <main+0x20>
			buttonStatus();
 80005d4:	f000 fc30 	bl	8000e38 <buttonStatus>
		if (ledSwitch) {
 80005d8:	e7ec      	b.n	80005b4 <main+0x20>
 80005da:	bf00      	nop
 80005dc:	20000002 	.word	0x20000002
 80005e0:	40020000 	.word	0x40020000
 80005e4:	200001ac 	.word	0x200001ac

080005e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fc32 	bl	8003e60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000662:	2304      	movs	r3, #4
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fd32 	bl	80020d8 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
		Error_Handler();
 800067a:	f000 fc39 	bl	8000ef0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 ff94 	bl	80025c8 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
		Error_Handler();
 80006a6:	f000 fc23 	bl	8000ef0 <Error_Handler>
	}
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 921600;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80006cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_2;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006da:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e4:	220c      	movs	r2, #12
 80006e6:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f6:	f002 f987 	bl	8002a08 <HAL_UART_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART2_UART_Init+0x48>
		Error_Handler();
 8000700:	f000 fbf6 	bl	8000ef0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000094 	.word	0x20000094
 800070c:	40004400 	.word	0x40004400

08000710 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_DMA_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <MX_DMA_Init+0x4c>)
 8000720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_DMA_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2010      	movs	r0, #16
 8000738:	f000 fec5 	bl	80014c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800073c:	2010      	movs	r0, #16
 800073e:	f000 fede 	bl	80014fe <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2011      	movs	r0, #17
 8000748:	f000 febd 	bl	80014c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800074c:	2011      	movs	r0, #17
 800074e:	f000 fed6 	bl	80014fe <HAL_NVIC_EnableIRQ>

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2c      	ldr	r2, [pc, #176]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a25      	ldr	r2, [pc, #148]	; (8000830 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_GPIO_Init+0xd4>)
 80007ec:	f001 fc40 	bl	8002070 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000808:	f001 fa96 	bl	8001d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800080c:	2320      	movs	r3, #32
 800080e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4804      	ldr	r0, [pc, #16]	; (8000834 <MX_GPIO_Init+0xd4>)
 8000824:	f001 fa88 	bl	8001d38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020000 	.word	0x40020000
 8000838:	40020800 	.word	0x40020800

0800083c <UARTDMAConfig>:

/* USER CODE BEGIN 4 */
void UARTDMAConfig() {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	// start UART in DMA Mode
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	4903      	ldr	r1, [pc, #12]	; (8000850 <UARTDMAConfig+0x14>)
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <UARTDMAConfig+0x18>)
 8000846:	f002 f9be 	bl	8002bc6 <HAL_UART_Receive_DMA>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000198 	.word	0x20000198
 8000854:	20000094 	.word	0x20000094

08000858 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_UART_RxCpltCallback+0x1c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d101      	bne.n	800086c <HAL_UART_RxCpltCallback+0x14>
		handleState();
 8000868:	f000 f806 	bl	8000878 <handleState>
	}
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000094 	.word	0x20000094

08000878 <handleState>:

void handleState() {
 8000878:	b5b0      	push	{r4, r5, r7, lr}
 800087a:	b09a      	sub	sp, #104	; 0x68
 800087c:	af00      	add	r7, sp, #0
	switch (state) {
 800087e:	4b8d      	ldr	r3, [pc, #564]	; (8000ab4 <handleState+0x23c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b02      	cmp	r3, #2
 8000884:	f000 80ee 	beq.w	8000a64 <handleState+0x1ec>
 8000888:	2b02      	cmp	r3, #2
 800088a:	f300 810e 	bgt.w	8000aaa <handleState+0x232>
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <handleState+0x20>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d030      	beq.n	80008f8 <handleState+0x80>
		}

		break;

	}
}
 8000896:	e108      	b.n	8000aaa <handleState+0x232>
		if (RxBuffer[0] == '0') {
 8000898:	4b87      	ldr	r3, [pc, #540]	; (8000ab8 <handleState+0x240>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b30      	cmp	r3, #48	; 0x30
 800089e:	d108      	bne.n	80008b2 <handleState+0x3a>
			state += 1;
 80008a0:	4b84      	ldr	r3, [pc, #528]	; (8000ab4 <handleState+0x23c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b82      	ldr	r3, [pc, #520]	; (8000ab4 <handleState+0x23c>)
 80008aa:	701a      	strb	r2, [r3, #0]
			ledPage();
 80008ac:	f000 f978 	bl	8000ba0 <ledPage>
		break;
 80008b0:	e0fb      	b.n	8000aaa <handleState+0x232>
		} else if (RxBuffer[0] == '1') {
 80008b2:	4b81      	ldr	r3, [pc, #516]	; (8000ab8 <handleState+0x240>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b31      	cmp	r3, #49	; 0x31
 80008b8:	d108      	bne.n	80008cc <handleState+0x54>
			state += 2;
 80008ba:	4b7e      	ldr	r3, [pc, #504]	; (8000ab4 <handleState+0x23c>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3302      	adds	r3, #2
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b7c      	ldr	r3, [pc, #496]	; (8000ab4 <handleState+0x23c>)
 80008c4:	701a      	strb	r2, [r3, #0]
			buttonPageUp();
 80008c6:	f000 fa57 	bl	8000d78 <buttonPageUp>
		break;
 80008ca:	e0ee      	b.n	8000aaa <handleState+0x232>
			uint8_t text6[41] = "Error Type of Input : Try Again\r\n";
 80008cc:	4b7b      	ldr	r3, [pc, #492]	; (8000abc <handleState+0x244>)
 80008ce:	463c      	mov	r4, r7
 80008d0:	461d      	mov	r5, r3
 80008d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008da:	682b      	ldr	r3, [r5, #0]
 80008dc:	8023      	strh	r3, [r4, #0]
 80008de:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	f8c3 2003 	str.w	r2, [r3, #3]
			HAL_UART_Transmit(&huart2, text6, 33, 10);
 80008ea:	4639      	mov	r1, r7
 80008ec:	230a      	movs	r3, #10
 80008ee:	2221      	movs	r2, #33	; 0x21
 80008f0:	4873      	ldr	r0, [pc, #460]	; (8000ac0 <handleState+0x248>)
 80008f2:	f002 f8d6 	bl	8002aa2 <HAL_UART_Transmit>
		break;
 80008f6:	e0d8      	b.n	8000aaa <handleState+0x232>
		if (RxBuffer[0] == 'a') {
 80008f8:	4b6f      	ldr	r3, [pc, #444]	; (8000ab8 <handleState+0x240>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b61      	cmp	r3, #97	; 0x61
 80008fe:	d11d      	bne.n	800093c <handleState+0xc4>
			sysHz += 1;
 8000900:	4b70      	ldr	r3, [pc, #448]	; (8000ac4 <handleState+0x24c>)
 8000902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000906:	b29b      	uxth	r3, r3
 8000908:	3301      	adds	r3, #1
 800090a:	b29b      	uxth	r3, r3
 800090c:	b21a      	sxth	r2, r3
 800090e:	4b6d      	ldr	r3, [pc, #436]	; (8000ac4 <handleState+0x24c>)
 8000910:	801a      	strh	r2, [r3, #0]
			sprintf((char*) spuTxt, "<Speed Up> | Current Hz : %d\r\n", sysHz);
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <handleState+0x24c>)
 8000914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000918:	461a      	mov	r2, r3
 800091a:	463b      	mov	r3, r7
 800091c:	496a      	ldr	r1, [pc, #424]	; (8000ac8 <handleState+0x250>)
 800091e:	4618      	mov	r0, r3
 8000920:	f003 faa6 	bl	8003e70 <siprintf>
			HAL_UART_Transmit(&huart2, spuTxt, strlen((char*) spuTxt), 10);
 8000924:	463b      	mov	r3, r7
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc5a 	bl	80001e0 <strlen>
 800092c:	4603      	mov	r3, r0
 800092e:	b29a      	uxth	r2, r3
 8000930:	4639      	mov	r1, r7
 8000932:	230a      	movs	r3, #10
 8000934:	4862      	ldr	r0, [pc, #392]	; (8000ac0 <handleState+0x248>)
 8000936:	f002 f8b4 	bl	8002aa2 <HAL_UART_Transmit>
		break;
 800093a:	e0b6      	b.n	8000aaa <handleState+0x232>
		} else if (RxBuffer[0] == 's') {
 800093c:	4b5e      	ldr	r3, [pc, #376]	; (8000ab8 <handleState+0x240>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b73      	cmp	r3, #115	; 0x73
 8000942:	d136      	bne.n	80009b2 <handleState+0x13a>
			if (sysHz > 0) {
 8000944:	4b5f      	ldr	r3, [pc, #380]	; (8000ac4 <handleState+0x24c>)
 8000946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094a:	2b00      	cmp	r3, #0
 800094c:	dd1d      	ble.n	800098a <handleState+0x112>
				sysHz -= 1;
 800094e:	4b5d      	ldr	r3, [pc, #372]	; (8000ac4 <handleState+0x24c>)
 8000950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000954:	b29b      	uxth	r3, r3
 8000956:	3b01      	subs	r3, #1
 8000958:	b29b      	uxth	r3, r3
 800095a:	b21a      	sxth	r2, r3
 800095c:	4b59      	ldr	r3, [pc, #356]	; (8000ac4 <handleState+0x24c>)
 800095e:	801a      	strh	r2, [r3, #0]
				sprintf((char*) spdTxt, "<Speed Down> | Current Hz : %d\r\n",
 8000960:	4b58      	ldr	r3, [pc, #352]	; (8000ac4 <handleState+0x24c>)
 8000962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000966:	461a      	mov	r2, r3
 8000968:	463b      	mov	r3, r7
 800096a:	4958      	ldr	r1, [pc, #352]	; (8000acc <handleState+0x254>)
 800096c:	4618      	mov	r0, r3
 800096e:	f003 fa7f 	bl	8003e70 <siprintf>
				HAL_UART_Transmit(&huart2, spdTxt, strlen((char*) spdTxt), 10);
 8000972:	463b      	mov	r3, r7
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc33 	bl	80001e0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	4639      	mov	r1, r7
 8000980:	230a      	movs	r3, #10
 8000982:	484f      	ldr	r0, [pc, #316]	; (8000ac0 <handleState+0x248>)
 8000984:	f002 f88d 	bl	8002aa2 <HAL_UART_Transmit>
		break;
 8000988:	e08f      	b.n	8000aaa <handleState+0x232>
				uint8_t text6[64] =
 800098a:	4b51      	ldr	r3, [pc, #324]	; (8000ad0 <handleState+0x258>)
 800098c:	463c      	mov	r4, r7
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				HAL_UART_Transmit(&huart2, text6, 64, 10);
 80009a4:	4639      	mov	r1, r7
 80009a6:	230a      	movs	r3, #10
 80009a8:	2240      	movs	r2, #64	; 0x40
 80009aa:	4845      	ldr	r0, [pc, #276]	; (8000ac0 <handleState+0x248>)
 80009ac:	f002 f879 	bl	8002aa2 <HAL_UART_Transmit>
		break;
 80009b0:	e07b      	b.n	8000aaa <handleState+0x232>
		} else if (RxBuffer[0] == 'd') {
 80009b2:	4b41      	ldr	r3, [pc, #260]	; (8000ab8 <handleState+0x240>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b64      	cmp	r3, #100	; 0x64
 80009b8:	d131      	bne.n	8000a1e <handleState+0x1a6>
			if (ledSwitch == 1) {
 80009ba:	4b46      	ldr	r3, [pc, #280]	; (8000ad4 <handleState+0x25c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d116      	bne.n	80009f0 <handleState+0x178>
				uint8_t text6[19] = "<Turn Off LED>:(\r\n";
 80009c2:	4b45      	ldr	r3, [pc, #276]	; (8000ad8 <handleState+0x260>)
 80009c4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80009c8:	461d      	mov	r5, r3
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	8022      	strh	r2, [r4, #0]
 80009d4:	3402      	adds	r4, #2
 80009d6:	0c1b      	lsrs	r3, r3, #16
 80009d8:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, text6, 19, 10);
 80009da:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80009de:	230a      	movs	r3, #10
 80009e0:	2213      	movs	r2, #19
 80009e2:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <handleState+0x248>)
 80009e4:	f002 f85d 	bl	8002aa2 <HAL_UART_Transmit>
				ledSwitch = 0;
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <handleState+0x25c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
		break;
 80009ee:	e05c      	b.n	8000aaa <handleState+0x232>
				uint8_t text6[19] = "<Turn On LED> :)\r\n";
 80009f0:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <handleState+0x264>)
 80009f2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80009f6:	461d      	mov	r5, r3
 80009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	8022      	strh	r2, [r4, #0]
 8000a02:	3402      	adds	r4, #2
 8000a04:	0c1b      	lsrs	r3, r3, #16
 8000a06:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, text6, 19, 10);
 8000a08:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000a0c:	230a      	movs	r3, #10
 8000a0e:	2213      	movs	r2, #19
 8000a10:	482b      	ldr	r0, [pc, #172]	; (8000ac0 <handleState+0x248>)
 8000a12:	f002 f846 	bl	8002aa2 <HAL_UART_Transmit>
				ledSwitch = 1;
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <handleState+0x25c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
		break;
 8000a1c:	e045      	b.n	8000aaa <handleState+0x232>
		} else if (RxBuffer[0] == 'x') {
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <handleState+0x240>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b78      	cmp	r3, #120	; 0x78
 8000a24:	d108      	bne.n	8000a38 <handleState+0x1c0>
			state -= 1;
 8000a26:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <handleState+0x23c>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <handleState+0x23c>)
 8000a30:	701a      	strb	r2, [r3, #0]
			homePage();
 8000a32:	f000 f855 	bl	8000ae0 <homePage>
		break;
 8000a36:	e038      	b.n	8000aaa <handleState+0x232>
			uint8_t text6[41] = "Error Type of Input : Try Again\r\n";
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <handleState+0x244>)
 8000a3a:	463c      	mov	r4, r7
 8000a3c:	461d      	mov	r5, r3
 8000a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a46:	682b      	ldr	r3, [r5, #0]
 8000a48:	8023      	strh	r3, [r4, #0]
 8000a4a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	f8c3 2003 	str.w	r2, [r3, #3]
			HAL_UART_Transmit(&huart2, text6, 33, 10);
 8000a56:	4639      	mov	r1, r7
 8000a58:	230a      	movs	r3, #10
 8000a5a:	2221      	movs	r2, #33	; 0x21
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <handleState+0x248>)
 8000a5e:	f002 f820 	bl	8002aa2 <HAL_UART_Transmit>
		break;
 8000a62:	e022      	b.n	8000aaa <handleState+0x232>
		if (RxBuffer[0] == 'x') {
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <handleState+0x240>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b78      	cmp	r3, #120	; 0x78
 8000a6a:	d108      	bne.n	8000a7e <handleState+0x206>
			state -= 2;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <handleState+0x23c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	3b02      	subs	r3, #2
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <handleState+0x23c>)
 8000a76:	701a      	strb	r2, [r3, #0]
			homePage();
 8000a78:	f000 f832 	bl	8000ae0 <homePage>
		break;
 8000a7c:	e014      	b.n	8000aa8 <handleState+0x230>
			uint8_t text6[41] = "Error Type of Input : Try Again\r\n";
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <handleState+0x244>)
 8000a80:	463c      	mov	r4, r7
 8000a82:	461d      	mov	r5, r3
 8000a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	682b      	ldr	r3, [r5, #0]
 8000a8e:	8023      	strh	r3, [r4, #0]
 8000a90:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	f8c3 2003 	str.w	r2, [r3, #3]
			HAL_UART_Transmit(&huart2, text6, 33, 10);
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	2221      	movs	r2, #33	; 0x21
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <handleState+0x248>)
 8000aa4:	f001 fffd 	bl	8002aa2 <HAL_UART_Transmit>
		break;
 8000aa8:	bf00      	nop
}
 8000aaa:	bf00      	nop
 8000aac:	3768      	adds	r7, #104	; 0x68
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001ac 	.word	0x200001ac
 8000ab8:	20000198 	.word	0x20000198
 8000abc:	080047a8 	.word	0x080047a8
 8000ac0:	20000094 	.word	0x20000094
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	08004764 	.word	0x08004764
 8000acc:	08004784 	.word	0x08004784
 8000ad0:	080047d4 	.word	0x080047d4
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	08004814 	.word	0x08004814
 8000adc:	08004828 	.word	0x08004828

08000ae0 <homePage>:
void homePage() {
 8000ae0:	b5b0      	push	{r4, r5, r7, lr}
 8000ae2:	b0a8      	sub	sp, #160	; 0xa0
 8000ae4:	af00      	add	r7, sp, #0
	uint8_t text1[38] = "*****LAB 5 : UART Communication*****\r\n";
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <homePage+0xac>)
 8000ae8:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000aec:	461d      	mov	r5, r3
 8000aee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000af6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000afa:	6020      	str	r0, [r4, #0]
 8000afc:	3404      	adds	r4, #4
 8000afe:	8021      	strh	r1, [r4, #0]
	uint8_t text2[38] = "*->Press 0 : LED CONTROL           *\r\n";
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <homePage+0xb0>)
 8000b02:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b14:	6020      	str	r0, [r4, #0]
 8000b16:	3404      	adds	r4, #4
 8000b18:	8021      	strh	r1, [r4, #0]
	uint8_t text3[38] = "*->Press 1 : BUTTON STATUS         *\r\n";
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <homePage+0xb4>)
 8000b1c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000b20:	461d      	mov	r5, r3
 8000b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b2e:	6020      	str	r0, [r4, #0]
 8000b30:	3404      	adds	r4, #4
 8000b32:	8021      	strh	r1, [r4, #0]
	uint8_t text4[38] = "************************************\r\n";
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <homePage+0xb8>)
 8000b36:	463c      	mov	r4, r7
 8000b38:	461d      	mov	r5, r3
 8000b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b46:	6020      	str	r0, [r4, #0]
 8000b48:	3404      	adds	r4, #4
 8000b4a:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, text1, 38, 100);
 8000b4c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000b50:	2364      	movs	r3, #100	; 0x64
 8000b52:	2226      	movs	r2, #38	; 0x26
 8000b54:	4811      	ldr	r0, [pc, #68]	; (8000b9c <homePage+0xbc>)
 8000b56:	f001 ffa4 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text2, 38, 100);
 8000b5a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	2226      	movs	r2, #38	; 0x26
 8000b62:	480e      	ldr	r0, [pc, #56]	; (8000b9c <homePage+0xbc>)
 8000b64:	f001 ff9d 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text3, 38, 100);
 8000b68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2226      	movs	r2, #38	; 0x26
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <homePage+0xbc>)
 8000b72:	f001 ff96 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text4, 38, 100);
 8000b76:	4639      	mov	r1, r7
 8000b78:	2364      	movs	r3, #100	; 0x64
 8000b7a:	2226      	movs	r2, #38	; 0x26
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <homePage+0xbc>)
 8000b7e:	f001 ff90 	bl	8002aa2 <HAL_UART_Transmit>
}
 8000b82:	bf00      	nop
 8000b84:	37a0      	adds	r7, #160	; 0xa0
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bdb0      	pop	{r4, r5, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	0800483c 	.word	0x0800483c
 8000b90:	08004864 	.word	0x08004864
 8000b94:	0800488c 	.word	0x0800488c
 8000b98:	080048b4 	.word	0x080048b4
 8000b9c:	20000094 	.word	0x20000094

08000ba0 <ledPage>:

void ledPage() {
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	b0bc      	sub	sp, #240	; 0xf0
 8000ba4:	af00      	add	r7, sp, #0
	uint8_t text1[38] = "**********LED CONTROL MODE**********\r\n";
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <ledPage+0xfc>)
 8000ba8:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000bac:	461d      	mov	r5, r3
 8000bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bba:	6020      	str	r0, [r4, #0]
 8000bbc:	3404      	adds	r4, #4
 8000bbe:	8021      	strh	r1, [r4, #0]
	uint8_t text2[38] = "* a : Speed Up   +1Hz              *\r\n";
 8000bc0:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <ledPage+0x100>)
 8000bc2:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000bc6:	461d      	mov	r5, r3
 8000bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bd4:	6020      	str	r0, [r4, #0]
 8000bd6:	3404      	adds	r4, #4
 8000bd8:	8021      	strh	r1, [r4, #0]
	uint8_t text3[38] = "* s : Speed Down -1Hz              *\r\n";
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <ledPage+0x104>)
 8000bdc:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000be0:	461d      	mov	r5, r3
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bee:	6020      	str	r0, [r4, #0]
 8000bf0:	3404      	adds	r4, #4
 8000bf2:	8021      	strh	r1, [r4, #0]
	uint8_t text4[38] = "* d : On/Off                       *\r\n";
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <ledPage+0x108>)
 8000bf6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c08:	6020      	str	r0, [r4, #0]
 8000c0a:	3404      	adds	r4, #4
 8000c0c:	8021      	strh	r1, [r4, #0]
	uint8_t text5[38] = "* x : back                         *\r\n";
 8000c0e:	4b27      	ldr	r3, [pc, #156]	; (8000cac <ledPage+0x10c>)
 8000c10:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000c14:	461d      	mov	r5, r3
 8000c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c22:	6020      	str	r0, [r4, #0]
 8000c24:	3404      	adds	r4, #4
 8000c26:	8021      	strh	r1, [r4, #0]
	uint8_t text6[38] = "************************************\r\n";
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <ledPage+0x110>)
 8000c2a:	463c      	mov	r4, r7
 8000c2c:	461d      	mov	r5, r3
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c3a:	6020      	str	r0, [r4, #0]
 8000c3c:	3404      	adds	r4, #4
 8000c3e:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, text1, 38, 10);
 8000c40:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000c44:	230a      	movs	r3, #10
 8000c46:	2226      	movs	r2, #38	; 0x26
 8000c48:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <ledPage+0x114>)
 8000c4a:	f001 ff2a 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text2, 38, 10);
 8000c4e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000c52:	230a      	movs	r3, #10
 8000c54:	2226      	movs	r2, #38	; 0x26
 8000c56:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <ledPage+0x114>)
 8000c58:	f001 ff23 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text3, 38, 10);
 8000c5c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000c60:	230a      	movs	r3, #10
 8000c62:	2226      	movs	r2, #38	; 0x26
 8000c64:	4813      	ldr	r0, [pc, #76]	; (8000cb4 <ledPage+0x114>)
 8000c66:	f001 ff1c 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text4, 38, 10);
 8000c6a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000c6e:	230a      	movs	r3, #10
 8000c70:	2226      	movs	r2, #38	; 0x26
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <ledPage+0x114>)
 8000c74:	f001 ff15 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text5, 38, 10);
 8000c78:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	2226      	movs	r2, #38	; 0x26
 8000c80:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <ledPage+0x114>)
 8000c82:	f001 ff0e 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text6, 38, 10);
 8000c86:	4639      	mov	r1, r7
 8000c88:	230a      	movs	r3, #10
 8000c8a:	2226      	movs	r2, #38	; 0x26
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <ledPage+0x114>)
 8000c8e:	f001 ff08 	bl	8002aa2 <HAL_UART_Transmit>
}
 8000c92:	bf00      	nop
 8000c94:	37f0      	adds	r7, #240	; 0xf0
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bdb0      	pop	{r4, r5, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	080048dc 	.word	0x080048dc
 8000ca0:	08004904 	.word	0x08004904
 8000ca4:	0800492c 	.word	0x0800492c
 8000ca8:	08004954 	.word	0x08004954
 8000cac:	0800497c 	.word	0x0800497c
 8000cb0:	080048b4 	.word	0x080048b4
 8000cb4:	20000094 	.word	0x20000094

08000cb8 <buttonPageP>:

void buttonPageP() {
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b0a8      	sub	sp, #160	; 0xa0
 8000cbc:	af00      	add	r7, sp, #0
	uint8_t text1[38] = "***********BUTTON STATUS************\r\n";
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <buttonPageP+0xac>)
 8000cc0:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000cc4:	461d      	mov	r5, r3
 8000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cce:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cd2:	6020      	str	r0, [r4, #0]
 8000cd4:	3404      	adds	r4, #4
 8000cd6:	8021      	strh	r1, [r4, #0]
	uint8_t text2[38] = "* x : back                         *\r\n";
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <buttonPageP+0xb0>)
 8000cda:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000cde:	461d      	mov	r5, r3
 8000ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cec:	6020      	str	r0, [r4, #0]
 8000cee:	3404      	adds	r4, #4
 8000cf0:	8021      	strh	r1, [r4, #0]
	uint8_t text3[38] = "* Button Is Pressed                *\r\n";
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <buttonPageP+0xb4>)
 8000cf4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000cf8:	461d      	mov	r5, r3
 8000cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d06:	6020      	str	r0, [r4, #0]
 8000d08:	3404      	adds	r4, #4
 8000d0a:	8021      	strh	r1, [r4, #0]
	uint8_t text4[38] = "************************************\r\n";
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <buttonPageP+0xb8>)
 8000d0e:	463c      	mov	r4, r7
 8000d10:	461d      	mov	r5, r3
 8000d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d1e:	6020      	str	r0, [r4, #0]
 8000d20:	3404      	adds	r4, #4
 8000d22:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, text1, 38, 10);
 8000d24:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000d28:	230a      	movs	r3, #10
 8000d2a:	2226      	movs	r2, #38	; 0x26
 8000d2c:	4811      	ldr	r0, [pc, #68]	; (8000d74 <buttonPageP+0xbc>)
 8000d2e:	f001 feb8 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text2, 38, 10);
 8000d32:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d36:	230a      	movs	r3, #10
 8000d38:	2226      	movs	r2, #38	; 0x26
 8000d3a:	480e      	ldr	r0, [pc, #56]	; (8000d74 <buttonPageP+0xbc>)
 8000d3c:	f001 feb1 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text3, 38, 10);
 8000d40:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000d44:	230a      	movs	r3, #10
 8000d46:	2226      	movs	r2, #38	; 0x26
 8000d48:	480a      	ldr	r0, [pc, #40]	; (8000d74 <buttonPageP+0xbc>)
 8000d4a:	f001 feaa 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text4, 38, 10);
 8000d4e:	4639      	mov	r1, r7
 8000d50:	230a      	movs	r3, #10
 8000d52:	2226      	movs	r2, #38	; 0x26
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <buttonPageP+0xbc>)
 8000d56:	f001 fea4 	bl	8002aa2 <HAL_UART_Transmit>
}
 8000d5a:	bf00      	nop
 8000d5c:	37a0      	adds	r7, #160	; 0xa0
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bdb0      	pop	{r4, r5, r7, pc}
 8000d62:	bf00      	nop
 8000d64:	080049a4 	.word	0x080049a4
 8000d68:	0800497c 	.word	0x0800497c
 8000d6c:	080049cc 	.word	0x080049cc
 8000d70:	080048b4 	.word	0x080048b4
 8000d74:	20000094 	.word	0x20000094

08000d78 <buttonPageUp>:

void buttonPageUp() {
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	b0a8      	sub	sp, #160	; 0xa0
 8000d7c:	af00      	add	r7, sp, #0
	uint8_t text1[38] = "***********BUTTON STATUS************\r\n";
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <buttonPageUp+0xac>)
 8000d80:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000d84:	461d      	mov	r5, r3
 8000d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d92:	6020      	str	r0, [r4, #0]
 8000d94:	3404      	adds	r4, #4
 8000d96:	8021      	strh	r1, [r4, #0]
	uint8_t text2[38] = "* x : back                         *\r\n";
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <buttonPageUp+0xb0>)
 8000d9a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000d9e:	461d      	mov	r5, r3
 8000da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dac:	6020      	str	r0, [r4, #0]
 8000dae:	3404      	adds	r4, #4
 8000db0:	8021      	strh	r1, [r4, #0]
	uint8_t text3[38] = "* Button Is Unpressed              *\r\n";
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <buttonPageUp+0xb4>)
 8000db4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000db8:	461d      	mov	r5, r3
 8000dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dc6:	6020      	str	r0, [r4, #0]
 8000dc8:	3404      	adds	r4, #4
 8000dca:	8021      	strh	r1, [r4, #0]
	uint8_t text4[38] = "************************************\r\n";
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <buttonPageUp+0xb8>)
 8000dce:	463c      	mov	r4, r7
 8000dd0:	461d      	mov	r5, r3
 8000dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dda:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dde:	6020      	str	r0, [r4, #0]
 8000de0:	3404      	adds	r4, #4
 8000de2:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart2, text1, 38, 10);
 8000de4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000de8:	230a      	movs	r3, #10
 8000dea:	2226      	movs	r2, #38	; 0x26
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <buttonPageUp+0xbc>)
 8000dee:	f001 fe58 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text2, 38, 10);
 8000df2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000df6:	230a      	movs	r3, #10
 8000df8:	2226      	movs	r2, #38	; 0x26
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <buttonPageUp+0xbc>)
 8000dfc:	f001 fe51 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text3, 38, 10);
 8000e00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e04:	230a      	movs	r3, #10
 8000e06:	2226      	movs	r2, #38	; 0x26
 8000e08:	480a      	ldr	r0, [pc, #40]	; (8000e34 <buttonPageUp+0xbc>)
 8000e0a:	f001 fe4a 	bl	8002aa2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, text4, 38, 10);
 8000e0e:	4639      	mov	r1, r7
 8000e10:	230a      	movs	r3, #10
 8000e12:	2226      	movs	r2, #38	; 0x26
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <buttonPageUp+0xbc>)
 8000e16:	f001 fe44 	bl	8002aa2 <HAL_UART_Transmit>
}
 8000e1a:	bf00      	nop
 8000e1c:	37a0      	adds	r7, #160	; 0xa0
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	080049a4 	.word	0x080049a4
 8000e28:	0800497c 	.word	0x0800497c
 8000e2c:	080049f4 	.word	0x080049f4
 8000e30:	080048b4 	.word	0x080048b4
 8000e34:	20000094 	.word	0x20000094

08000e38 <buttonStatus>:

void buttonStatus() {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	buttonStateAf = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	4810      	ldr	r0, [pc, #64]	; (8000e84 <buttonStatus+0x4c>)
 8000e42:	f001 f8fd 	bl	8002040 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <buttonStatus+0x50>)
 8000e4c:	701a      	strb	r2, [r3, #0]
	if (buttonStateAf == 0 && buttonStateBf == 1) {
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <buttonStatus+0x50>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d105      	bne.n	8000e62 <buttonStatus+0x2a>
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <buttonStatus+0x54>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d101      	bne.n	8000e62 <buttonStatus+0x2a>
		buttonPageP();
 8000e5e:	f7ff ff2b 	bl	8000cb8 <buttonPageP>
	}
	if (buttonStateAf == 1 && buttonStateBf == 0) {
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <buttonStatus+0x50>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d105      	bne.n	8000e76 <buttonStatus+0x3e>
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <buttonStatus+0x54>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <buttonStatus+0x3e>
		buttonPageUp();
 8000e72:	f7ff ff81 	bl	8000d78 <buttonPageUp>
	}
	buttonStateBf = buttonStateAf;
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <buttonStatus+0x50>)
 8000e78:	781a      	ldrb	r2, [r3, #0]
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <buttonStatus+0x54>)
 8000e7c:	701a      	strb	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40020800 	.word	0x40020800
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000003 	.word	0x20000003

08000e90 <DummyTask>:
void DummyTask() {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	static float timestamp = 0;
	if (HAL_GetTick() >= timestamp) {
 8000e94:	f000 fa30 	bl	80012f8 <HAL_GetTick>
 8000e98:	ee07 0a90 	vmov	s15, r0
 8000e9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <DummyTask+0x54>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eae:	da00      	bge.n	8000eb2 <DummyTask+0x22>
		timestamp = HAL_GetTick() + (1000 / sysHz); // 10 Hz
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
}
 8000eb0:	e016      	b.n	8000ee0 <DummyTask+0x50>
		timestamp = HAL_GetTick() + (1000 / sysHz); // 10 Hz
 8000eb2:	f000 fa21 	bl	80012f8 <HAL_GetTick>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <DummyTask+0x58>)
 8000eba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec4:	fb92 f2f1 	sdiv	r2, r2, r1
 8000ec8:	4413      	add	r3, r2
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <DummyTask+0x54>)
 8000ed4:	edc3 7a00 	vstr	s15, [r3]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ed8:	2120      	movs	r1, #32
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <DummyTask+0x5c>)
 8000edc:	f001 f8e1 	bl	80020a2 <HAL_GPIO_TogglePin>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200001b0 	.word	0x200001b0
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	40020000 	.word	0x40020000

08000ef0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ef8:	e7fe      	b.n	8000ef8 <Error_Handler+0x8>
	...

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f3a:	2007      	movs	r0, #7
 8000f3c:	f000 fab8 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_UART_MspInit+0x150>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f040 8091 	bne.w	8001092 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a49      	ldr	r2, [pc, #292]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b43      	ldr	r3, [pc, #268]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a42      	ldr	r2, [pc, #264]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <HAL_UART_MspInit+0x154>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fa8:	230c      	movs	r3, #12
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4838      	ldr	r0, [pc, #224]	; (80010a4 <HAL_UART_MspInit+0x158>)
 8000fc4:	f000 feb8 	bl	8001d38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fca:	4a38      	ldr	r2, [pc, #224]	; (80010ac <HAL_UART_MspInit+0x160>)
 8000fcc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8000ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8001000:	2200      	movs	r2, #0
 8001002:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800100a:	4827      	ldr	r0, [pc, #156]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 800100c:	f000 fa92 	bl	8001534 <HAL_DMA_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001016:	f7ff ff6b 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <HAL_UART_MspInit+0x15c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_UART_MspInit+0x168>)
 800102a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800102e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001032:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001036:	2240      	movs	r2, #64	; 0x40
 8001038:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001046:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001066:	4812      	ldr	r0, [pc, #72]	; (80010b0 <HAL_UART_MspInit+0x164>)
 8001068:	f000 fa64 	bl	8001534 <HAL_DMA_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001072:	f7ff ff3d 	bl	8000ef0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800107a:	635a      	str	r2, [r3, #52]	; 0x34
 800107c:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <HAL_UART_MspInit+0x164>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	2026      	movs	r0, #38	; 0x26
 8001088:	f000 fa1d 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800108c:	2026      	movs	r0, #38	; 0x26
 800108e:	f000 fa36 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40004400 	.word	0x40004400
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	200000d8 	.word	0x200000d8
 80010ac:	40026088 	.word	0x40026088
 80010b0:	20000138 	.word	0x20000138
 80010b4:	400260a0 	.word	0x400260a0

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 f8e4 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <DMA1_Stream5_IRQHandler+0x10>)
 8001112:	f000 fba7 	bl	8001864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000d8 	.word	0x200000d8

08001120 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <DMA1_Stream6_IRQHandler+0x10>)
 8001126:	f000 fb9d 	bl	8001864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000138 	.word	0x20000138

08001134 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <USART2_IRQHandler+0x10>)
 800113a:	f001 fd75 	bl	8002c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000094 	.word	0x20000094

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f002 fe48 	bl	8003e0c <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20020000 	.word	0x20020000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	200001b4 	.word	0x200001b4
 80011b0:	200001d0 	.word	0x200001d0

080011b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <SystemInit+0x20>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <SystemInit+0x20>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f4:	4c0b      	ldr	r4, [pc, #44]	; (8001224 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001202:	f7ff ffd7 	bl	80011b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f002 fe07 	bl	8003e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120a:	f7ff f9c3 	bl	8000594 <main>
  bx  lr    
 800120e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800121c:	08004a80 	.word	0x08004a80
  ldr r2, =_sbss
 8001220:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001224:	200001cc 	.word	0x200001cc

08001228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <HAL_Init+0x40>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_Init+0x40>)
 8001242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x40>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f92b 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fe4c 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023c00 	.word	0x40023c00

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f943 	bl	800151a <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 f90b 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000010 	.word	0x20000010
 80012cc:	2000000c 	.word	0x2000000c

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000010 	.word	0x20000010
 80012f4:	200001b8 	.word	0x200001b8

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200001b8 	.word	0x200001b8

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4907      	ldr	r1, [pc, #28]	; (80013ac <__NVIC_EnableIRQ+0x38>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff8e 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff29 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff3e 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff8e 	bl	8001404 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff31 	bl	8001374 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa2 	bl	800146c <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff feda 	bl	80012f8 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e099      	b.n	8001684 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2202      	movs	r2, #2
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001570:	e00f      	b.n	8001592 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001572:	f7ff fec1 	bl	80012f8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b05      	cmp	r3, #5
 800157e:	d908      	bls.n	8001592 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e078      	b.n	8001684 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e8      	bne.n	8001572 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <HAL_DMA_Init+0x158>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d107      	bne.n	80015fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	4313      	orrs	r3, r2
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f023 0307 	bic.w	r3, r3, #7
 8001612:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	4313      	orrs	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	2b04      	cmp	r3, #4
 8001624:	d117      	bne.n	8001656 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4313      	orrs	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00e      	beq.n	8001656 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fb01 	bl	8001c40 <DMA_CheckFifoParam>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001652:	2301      	movs	r3, #1
 8001654:	e016      	b.n	8001684 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fab8 	bl	8001bd4 <DMA_CalcBaseAndBitshift>
 8001664:	4603      	mov	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	223f      	movs	r2, #63	; 0x3f
 800166e:	409a      	lsls	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	f010803f 	.word	0xf010803f

08001690 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_DMA_Start_IT+0x26>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e040      	b.n	8001738 <HAL_DMA_Start_IT+0xa8>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d12f      	bne.n	800172a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2202      	movs	r2, #2
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fa4a 	bl	8001b78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	223f      	movs	r2, #63	; 0x3f
 80016ea:	409a      	lsls	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0216 	orr.w	r2, r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	2b00      	cmp	r3, #0
 8001706:	d007      	beq.n	8001718 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0208 	orr.w	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e005      	b.n	8001736 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001732:	2302      	movs	r3, #2
 8001734:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001736:	7dfb      	ldrb	r3, [r7, #23]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800174e:	f7ff fdd3 	bl	80012f8 <HAL_GetTick>
 8001752:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d008      	beq.n	8001772 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e052      	b.n	8001818 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0216 	bic.w	r2, r2, #22
 8001780:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001790:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d103      	bne.n	80017a2 <HAL_DMA_Abort+0x62>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0208 	bic.w	r2, r2, #8
 80017b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0201 	bic.w	r2, r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c2:	e013      	b.n	80017ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c4:	f7ff fd98 	bl	80012f8 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d90c      	bls.n	80017ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2203      	movs	r2, #3
 80017dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e015      	b.n	8001818 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1e4      	bne.n	80017c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fe:	223f      	movs	r2, #63	; 0x3f
 8001800:	409a      	lsls	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d004      	beq.n	800183e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00c      	b.n	8001858 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2205      	movs	r2, #5
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001870:	4b8e      	ldr	r3, [pc, #568]	; (8001aac <HAL_DMA_IRQHandler+0x248>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a8e      	ldr	r2, [pc, #568]	; (8001ab0 <HAL_DMA_IRQHandler+0x24c>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0a9b      	lsrs	r3, r3, #10
 800187c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2208      	movs	r2, #8
 8001890:	409a      	lsls	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01a      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0204 	bic.w	r2, r2, #4
 80018b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	2208      	movs	r2, #8
 80018be:	409a      	lsls	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2201      	movs	r2, #1
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d012      	beq.n	8001906 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f2:	2201      	movs	r2, #1
 80018f4:	409a      	lsls	r2, r3
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	f043 0202 	orr.w	r2, r3, #2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	2204      	movs	r2, #4
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d012      	beq.n	800193c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00b      	beq.n	800193c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2204      	movs	r2, #4
 800192a:	409a      	lsls	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	f043 0204 	orr.w	r2, r3, #4
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	2210      	movs	r2, #16
 8001942:	409a      	lsls	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d043      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d03c      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	2210      	movs	r2, #16
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d018      	beq.n	80019a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d108      	bne.n	8001994 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d024      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
 8001992:	e01f      	b.n	80019d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01b      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4798      	blx	r3
 80019a4:	e016      	b.n	80019d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0208 	bic.w	r2, r2, #8
 80019c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	2220      	movs	r2, #32
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 808f 	beq.w	8001b04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8087 	beq.w	8001b04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2220      	movs	r2, #32
 80019fc:	409a      	lsls	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d136      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0216 	bic.w	r2, r2, #22
 8001a1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <HAL_DMA_IRQHandler+0x1da>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0208 	bic.w	r2, r2, #8
 8001a4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	223f      	movs	r2, #63	; 0x3f
 8001a54:	409a      	lsls	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d07e      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
        }
        return;
 8001a7a:	e079      	b.n	8001b70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01d      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10d      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d031      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
 8001aa8:	e02c      	b.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
 8001aaa:	bf00      	nop
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d023      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
 8001ac4:	e01e      	b.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10f      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0210 	bic.w	r2, r2, #16
 8001ae2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d032      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d022      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3301      	adds	r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d307      	bcc.n	8001b4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f2      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x2cc>
 8001b4a:	e000      	b.n	8001b4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	4798      	blx	r3
 8001b6e:	e000      	b.n	8001b72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b70:	bf00      	nop
    }
  }
}
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b40      	cmp	r3, #64	; 0x40
 8001ba4:	d108      	bne.n	8001bb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bb6:	e007      	b.n	8001bc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3b10      	subs	r3, #16
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <DMA_CalcBaseAndBitshift+0x64>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bee:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <DMA_CalcBaseAndBitshift+0x68>)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d909      	bls.n	8001c16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c0a:	f023 0303 	bic.w	r3, r3, #3
 8001c0e:	1d1a      	adds	r2, r3, #4
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58
 8001c14:	e007      	b.n	8001c26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c1e:	f023 0303 	bic.w	r3, r3, #3
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	aaaaaaab 	.word	0xaaaaaaab
 8001c3c:	08004a34 	.word	0x08004a34

08001c40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d11f      	bne.n	8001c9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d856      	bhi.n	8001d0e <DMA_CheckFifoParam+0xce>
 8001c60:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <DMA_CheckFifoParam+0x28>)
 8001c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c66:	bf00      	nop
 8001c68:	08001c79 	.word	0x08001c79
 8001c6c:	08001c8b 	.word	0x08001c8b
 8001c70:	08001c79 	.word	0x08001c79
 8001c74:	08001d0f 	.word	0x08001d0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d046      	beq.n	8001d12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c88:	e043      	b.n	8001d12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c92:	d140      	bne.n	8001d16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c98:	e03d      	b.n	8001d16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ca2:	d121      	bne.n	8001ce8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d837      	bhi.n	8001d1a <DMA_CheckFifoParam+0xda>
 8001caa:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <DMA_CheckFifoParam+0x70>)
 8001cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb0:	08001cc1 	.word	0x08001cc1
 8001cb4:	08001cc7 	.word	0x08001cc7
 8001cb8:	08001cc1 	.word	0x08001cc1
 8001cbc:	08001cd9 	.word	0x08001cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc4:	e030      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d025      	beq.n	8001d1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cd6:	e022      	b.n	8001d1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ce0:	d11f      	bne.n	8001d22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ce6:	e01c      	b.n	8001d22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d903      	bls.n	8001cf6 <DMA_CheckFifoParam+0xb6>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d003      	beq.n	8001cfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cf4:	e018      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cfa:	e015      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0c:	e00b      	b.n	8001d26 <DMA_CheckFifoParam+0xe6>
      break;
 8001d0e:	bf00      	nop
 8001d10:	e00a      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d12:	bf00      	nop
 8001d14:	e008      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d16:	bf00      	nop
 8001d18:	e006      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1a:	bf00      	nop
 8001d1c:	e004      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d1e:	bf00      	nop
 8001d20:	e002      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d22:	bf00      	nop
 8001d24:	e000      	b.n	8001d28 <DMA_CheckFifoParam+0xe8>
      break;
 8001d26:	bf00      	nop
    }
  } 
  
  return status; 
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e159      	b.n	8002008 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f040 8148 	bne.w	8002002 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d005      	beq.n	8001d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d130      	bne.n	8001dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 0201 	and.w	r2, r3, #1
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d017      	beq.n	8001e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d123      	bne.n	8001e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	08da      	lsrs	r2, r3, #3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3208      	adds	r2, #8
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	08da      	lsrs	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	3208      	adds	r2, #8
 8001e76:	69b9      	ldr	r1, [r7, #24]
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0203 	and.w	r2, r3, #3
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a2 	beq.w	8002002 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b57      	ldr	r3, [pc, #348]	; (8002020 <HAL_GPIO_Init+0x2e8>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	4a56      	ldr	r2, [pc, #344]	; (8002020 <HAL_GPIO_Init+0x2e8>)
 8001ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ece:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HAL_GPIO_Init+0x2e8>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eda:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_GPIO_Init+0x2ec>)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a49      	ldr	r2, [pc, #292]	; (8002028 <HAL_GPIO_Init+0x2f0>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x202>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a48      	ldr	r2, [pc, #288]	; (800202c <HAL_GPIO_Init+0x2f4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x1fe>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a47      	ldr	r2, [pc, #284]	; (8002030 <HAL_GPIO_Init+0x2f8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x1fa>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a46      	ldr	r2, [pc, #280]	; (8002034 <HAL_GPIO_Init+0x2fc>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x1f6>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a45      	ldr	r2, [pc, #276]	; (8002038 <HAL_GPIO_Init+0x300>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x1f2>
 8001f26:	2304      	movs	r3, #4
 8001f28:	e008      	b.n	8001f3c <HAL_GPIO_Init+0x204>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x204>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e004      	b.n	8001f3c <HAL_GPIO_Init+0x204>
 8001f32:	2302      	movs	r3, #2
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_Init+0x204>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_GPIO_Init+0x204>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	f002 0203 	and.w	r2, r2, #3
 8001f42:	0092      	lsls	r2, r2, #2
 8001f44:	4093      	lsls	r3, r2
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f4c:	4935      	ldr	r1, [pc, #212]	; (8002024 <HAL_GPIO_Init+0x2ec>)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f5a:	4b38      	ldr	r3, [pc, #224]	; (800203c <HAL_GPIO_Init+0x304>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f7e:	4a2f      	ldr	r2, [pc, #188]	; (800203c <HAL_GPIO_Init+0x304>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_GPIO_Init+0x304>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa8:	4a24      	ldr	r2, [pc, #144]	; (800203c <HAL_GPIO_Init+0x304>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <HAL_GPIO_Init+0x304>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fd2:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_GPIO_Init+0x304>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <HAL_GPIO_Init+0x304>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ffc:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_GPIO_Init+0x304>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3301      	adds	r3, #1
 8002006:	61fb      	str	r3, [r7, #28]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	2b0f      	cmp	r3, #15
 800200c:	f67f aea2 	bls.w	8001d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800
 8002024:	40013800 	.word	0x40013800
 8002028:	40020000 	.word	0x40020000
 800202c:	40020400 	.word	0x40020400
 8002030:	40020800 	.word	0x40020800
 8002034:	40020c00 	.word	0x40020c00
 8002038:	40021000 	.word	0x40021000
 800203c:	40013c00 	.word	0x40013c00

08002040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	e001      	b.n	8002062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	041a      	lsls	r2, r3, #16
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43d9      	mvns	r1, r3
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	400b      	ands	r3, r1
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	619a      	str	r2, [r3, #24]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e267      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d075      	beq.n	80021e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d00c      	beq.n	800211c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002102:	4b85      	ldr	r3, [pc, #532]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210a:	2b08      	cmp	r3, #8
 800210c:	d112      	bne.n	8002134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210e:	4b82      	ldr	r3, [pc, #520]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800211a:	d10b      	bne.n	8002134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	4b7e      	ldr	r3, [pc, #504]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d05b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x108>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d157      	bne.n	80021e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e242      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0x74>
 800213e:	4b76      	ldr	r3, [pc, #472]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a75      	ldr	r2, [pc, #468]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e01d      	b.n	8002188 <HAL_RCC_OscConfig+0xb0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x98>
 8002156:	4b70      	ldr	r3, [pc, #448]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6f      	ldr	r2, [pc, #444]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 800215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6c      	ldr	r2, [pc, #432]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e00b      	b.n	8002188 <HAL_RCC_OscConfig+0xb0>
 8002170:	4b69      	ldr	r3, [pc, #420]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a68      	ldr	r2, [pc, #416]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b66      	ldr	r3, [pc, #408]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a65      	ldr	r2, [pc, #404]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff f8b2 	bl	80012f8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff f8ae 	bl	80012f8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e207      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0xc0>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f89e 	bl	80012f8 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f89a 	bl	80012f8 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1f3      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021d2:	4b51      	ldr	r3, [pc, #324]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0xe8>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d063      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ee:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fa:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002202:	2b08      	cmp	r3, #8
 8002204:	d11c      	bne.n	8002240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002206:	4b44      	ldr	r3, [pc, #272]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d116      	bne.n	8002240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002212:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d005      	beq.n	800222a <HAL_RCC_OscConfig+0x152>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e1c7      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800222a:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4937      	ldr	r1, [pc, #220]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 800223a:	4313      	orrs	r3, r2
 800223c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	e03a      	b.n	80022b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7ff f853 	bl	80012f8 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002256:	f7ff f84f 	bl	80012f8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e1a8      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4925      	ldr	r1, [pc, #148]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
 8002288:	e015      	b.n	80022b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x244>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f832 	bl	80012f8 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002298:	f7ff f82e 	bl	80012f8 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e187      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d036      	beq.n	8002330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ca:	4b15      	ldr	r3, [pc, #84]	; (8002320 <HAL_RCC_OscConfig+0x248>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff f812 	bl	80012f8 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff f80e 	bl	80012f8 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e167      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCC_OscConfig+0x240>)
 80022ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x200>
 80022f6:	e01b      	b.n	8002330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f8:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_RCC_OscConfig+0x248>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fffb 	bl	80012f8 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	e00e      	b.n	8002324 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002306:	f7fe fff7 	bl	80012f8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d907      	bls.n	8002324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e150      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
 8002318:	40023800 	.word	0x40023800
 800231c:	42470000 	.word	0x42470000
 8002320:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002324:	4b88      	ldr	r3, [pc, #544]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ea      	bne.n	8002306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8097 	beq.w	800246c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002342:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10f      	bne.n	800236e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	4b7d      	ldr	r3, [pc, #500]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a7c      	ldr	r2, [pc, #496]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b7a      	ldr	r3, [pc, #488]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b77      	ldr	r3, [pc, #476]	; (800254c <HAL_RCC_OscConfig+0x474>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b74      	ldr	r3, [pc, #464]	; (800254c <HAL_RCC_OscConfig+0x474>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a73      	ldr	r2, [pc, #460]	; (800254c <HAL_RCC_OscConfig+0x474>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7fe ffb7 	bl	80012f8 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7fe ffb3 	bl	80012f8 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e10c      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b6a      	ldr	r3, [pc, #424]	; (800254c <HAL_RCC_OscConfig+0x474>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x2ea>
 80023b4:	4b64      	ldr	r3, [pc, #400]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	4a63      	ldr	r2, [pc, #396]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6713      	str	r3, [r2, #112]	; 0x70
 80023c0:	e01c      	b.n	80023fc <HAL_RCC_OscConfig+0x324>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x30c>
 80023ca:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	4a5e      	ldr	r2, [pc, #376]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023d0:	f043 0304 	orr.w	r3, r3, #4
 80023d4:	6713      	str	r3, [r2, #112]	; 0x70
 80023d6:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a5b      	ldr	r2, [pc, #364]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
 80023e2:	e00b      	b.n	80023fc <HAL_RCC_OscConfig+0x324>
 80023e4:	4b58      	ldr	r3, [pc, #352]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e8:	4a57      	ldr	r2, [pc, #348]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	; 0x70
 80023f0:	4b55      	ldr	r3, [pc, #340]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	4a54      	ldr	r2, [pc, #336]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80023f6:	f023 0304 	bic.w	r3, r3, #4
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d015      	beq.n	8002430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7fe ff78 	bl	80012f8 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe ff74 	bl	80012f8 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0cb      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002422:	4b49      	ldr	r3, [pc, #292]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0ee      	beq.n	800240c <HAL_RCC_OscConfig+0x334>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7fe ff62 	bl	80012f8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe ff5e 	bl	80012f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e0b5      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244e:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1ee      	bne.n	8002438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245a:	7dfb      	ldrb	r3, [r7, #23]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d105      	bne.n	800246c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002460:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	4a38      	ldr	r2, [pc, #224]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80a1 	beq.w	80025b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002476:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b08      	cmp	r3, #8
 8002480:	d05c      	beq.n	800253c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d141      	bne.n	800250e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCC_OscConfig+0x478>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe ff32 	bl	80012f8 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe ff2e 	bl	80012f8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e087      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69da      	ldr	r2, [r3, #28]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	019b      	lsls	r3, r3, #6
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	3b01      	subs	r3, #1
 80024d0:	041b      	lsls	r3, r3, #16
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	491b      	ldr	r1, [pc, #108]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x478>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe ff07 	bl	80012f8 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ee:	f7fe ff03 	bl	80012f8 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e05c      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x416>
 800250c:	e054      	b.n	80025b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_OscConfig+0x478>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fef0 	bl	80012f8 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe feec 	bl	80012f8 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e045      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_OscConfig+0x470>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x444>
 800253a:	e03d      	b.n	80025b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e038      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
 8002548:	40023800 	.word	0x40023800
 800254c:	40007000 	.word	0x40007000
 8002550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_RCC_OscConfig+0x4ec>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d028      	beq.n	80025b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d121      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d11a      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800258a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800258c:	4293      	cmp	r3, r2
 800258e:	d111      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	3b01      	subs	r3, #1
 800259e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d001      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0cc      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025dc:	4b68      	ldr	r3, [pc, #416]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d90c      	bls.n	8002604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b65      	ldr	r3, [pc, #404]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800263e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d044      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d119      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d003      	beq.n	8002686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002682:	2b03      	cmp	r3, #3
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e067      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4934      	ldr	r1, [pc, #208]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b8:	f7fe fe1e 	bl	80012f8 <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7fe fe1a 	bl	80012f8 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e04f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 020c 	and.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1eb      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e8:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d20c      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f6:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	490a      	ldr	r1, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1c8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fd7e 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00
 8002784:	40023800 	.word	0x40023800
 8002788:	08004a1c 	.word	0x08004a1c
 800278c:	20000008 	.word	0x20000008
 8002790:	2000000c 	.word	0x2000000c

08002794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002798:	b094      	sub	sp, #80	; 0x50
 800279a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	647b      	str	r3, [r7, #68]	; 0x44
 80027a0:	2300      	movs	r3, #0
 80027a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a4:	2300      	movs	r3, #0
 80027a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ac:	4b79      	ldr	r3, [pc, #484]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d00d      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x40>
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	f200 80e1 	bhi.w	8002980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x34>
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x3a>
 80027c6:	e0db      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027cc:	e0db      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ce:	4b73      	ldr	r3, [pc, #460]	; (800299c <HAL_RCC_GetSysClockFreq+0x208>)
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d2:	e0d8      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d4:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027de:	4b6d      	ldr	r3, [pc, #436]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	2200      	movs	r2, #0
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
 8002802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002806:	4622      	mov	r2, r4
 8002808:	462b      	mov	r3, r5
 800280a:	f04f 0000 	mov.w	r0, #0
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	0159      	lsls	r1, r3, #5
 8002814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002818:	0150      	lsls	r0, r2, #5
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4621      	mov	r1, r4
 8002820:	1a51      	subs	r1, r2, r1
 8002822:	6139      	str	r1, [r7, #16]
 8002824:	4629      	mov	r1, r5
 8002826:	eb63 0301 	sbc.w	r3, r3, r1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002838:	4659      	mov	r1, fp
 800283a:	018b      	lsls	r3, r1, #6
 800283c:	4651      	mov	r1, sl
 800283e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002842:	4651      	mov	r1, sl
 8002844:	018a      	lsls	r2, r1, #6
 8002846:	4651      	mov	r1, sl
 8002848:	ebb2 0801 	subs.w	r8, r2, r1
 800284c:	4659      	mov	r1, fp
 800284e:	eb63 0901 	sbc.w	r9, r3, r1
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800285e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002866:	4690      	mov	r8, r2
 8002868:	4699      	mov	r9, r3
 800286a:	4623      	mov	r3, r4
 800286c:	eb18 0303 	adds.w	r3, r8, r3
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	462b      	mov	r3, r5
 8002874:	eb49 0303 	adc.w	r3, r9, r3
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002886:	4629      	mov	r1, r5
 8002888:	024b      	lsls	r3, r1, #9
 800288a:	4621      	mov	r1, r4
 800288c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002890:	4621      	mov	r1, r4
 8002892:	024a      	lsls	r2, r1, #9
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289a:	2200      	movs	r2, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
 800289e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028a4:	f7fd fcf4 	bl	8000290 <__aeabi_uldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4613      	mov	r3, r2
 80028ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b0:	e058      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b38      	ldr	r3, [pc, #224]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	2200      	movs	r2, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	4611      	mov	r1, r2
 80028be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028c2:	623b      	str	r3, [r7, #32]
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
 80028c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028cc:	4642      	mov	r2, r8
 80028ce:	464b      	mov	r3, r9
 80028d0:	f04f 0000 	mov.w	r0, #0
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	0159      	lsls	r1, r3, #5
 80028da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028de:	0150      	lsls	r0, r2, #5
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4641      	mov	r1, r8
 80028e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ea:	4649      	mov	r1, r9
 80028ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002904:	ebb2 040a 	subs.w	r4, r2, sl
 8002908:	eb63 050b 	sbc.w	r5, r3, fp
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	00eb      	lsls	r3, r5, #3
 8002916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800291a:	00e2      	lsls	r2, r4, #3
 800291c:	4614      	mov	r4, r2
 800291e:	461d      	mov	r5, r3
 8002920:	4643      	mov	r3, r8
 8002922:	18e3      	adds	r3, r4, r3
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	464b      	mov	r3, r9
 8002928:	eb45 0303 	adc.w	r3, r5, r3
 800292c:	607b      	str	r3, [r7, #4]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800293a:	4629      	mov	r1, r5
 800293c:	028b      	lsls	r3, r1, #10
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002944:	4621      	mov	r1, r4
 8002946:	028a      	lsls	r2, r1, #10
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294e:	2200      	movs	r2, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	61fa      	str	r2, [r7, #28]
 8002954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002958:	f7fd fc9a 	bl	8000290 <__aeabi_uldivmod>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4613      	mov	r3, r2
 8002962:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002964:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <HAL_RCC_GetSysClockFreq+0x200>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	0c1b      	lsrs	r3, r3, #16
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	3301      	adds	r3, #1
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800297e:	e002      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetSysClockFreq+0x204>)
 8002982:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002988:	4618      	mov	r0, r3
 800298a:	3750      	adds	r7, #80	; 0x50
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	00f42400 	.word	0x00f42400
 800299c:	007a1200 	.word	0x007a1200

080029a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000008 	.word	0x20000008

080029b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029bc:	f7ff fff0 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	0a9b      	lsrs	r3, r3, #10
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	4903      	ldr	r1, [pc, #12]	; (80029dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ce:	5ccb      	ldrb	r3, [r1, r3]
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	08004a2c 	.word	0x08004a2c

080029e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029e4:	f7ff ffdc 	bl	80029a0 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0b5b      	lsrs	r3, r3, #13
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08004a2c 	.word	0x08004a2c

08002a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e03f      	b.n	8002a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fa8c 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 ff69 	bl	8003924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b08a      	sub	sp, #40	; 0x28
 8002aa6:	af02      	add	r7, sp, #8
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	603b      	str	r3, [r7, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d17c      	bne.n	8002bbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_UART_Transmit+0x2c>
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e075      	b.n	8002bbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_UART_Transmit+0x3e>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e06e      	b.n	8002bbe <HAL_UART_Transmit+0x11c>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2221      	movs	r2, #33	; 0x21
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002af6:	f7fe fbff 	bl	80012f8 <HAL_GetTick>
 8002afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b10:	d108      	bne.n	8002b24 <HAL_UART_Transmit+0x82>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e003      	b.n	8002b2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b34:	e02a      	b.n	8002b8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2180      	movs	r1, #128	; 0x80
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 fc21 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e036      	b.n	8002bbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10b      	bne.n	8002b6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	3302      	adds	r3, #2
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	e007      	b.n	8002b7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1cf      	bne.n	8002b36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2140      	movs	r1, #64	; 0x40
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fbf1 	bl	8003388 <UART_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e006      	b.n	8002bbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3720      	adds	r7, #32
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d11d      	bne.n	8002c1c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <HAL_UART_Receive_DMA+0x26>
 8002be6:	88fb      	ldrh	r3, [r7, #6]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e016      	b.n	8002c1e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_UART_Receive_DMA+0x38>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e00f      	b.n	8002c1e <HAL_UART_Receive_DMA+0x58>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fc26 	bl	8003464 <UART_Start_Receive_DMA>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	e000      	b.n	8002c1e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0ba      	sub	sp, #232	; 0xe8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_UART_IRQHandler+0x66>
 8002c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fd91 	bl	80037ae <UART_Receive_IT>
      return;
 8002c8c:	e256      	b.n	800313c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80de 	beq.w	8002e54 <HAL_UART_IRQHandler+0x22c>
 8002c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80d1 	beq.w	8002e54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xae>
 8002cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_UART_IRQHandler+0xd2>
 8002ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_UART_IRQHandler+0xf6>
 8002d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d011      	beq.n	8002d4e <HAL_UART_IRQHandler+0x126>
 8002d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0208 	orr.w	r2, r3, #8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 81ed 	beq.w	8003132 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_UART_IRQHandler+0x14e>
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fd1c 	bl	80037ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <HAL_UART_IRQHandler+0x17a>
 8002d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d04f      	beq.n	8002e42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fc24 	bl	80035f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d141      	bne.n	8002e3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002de2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002de6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1d9      	bne.n	8002db6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d013      	beq.n	8002e32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	4a7d      	ldr	r2, [pc, #500]	; (8003004 <HAL_UART_IRQHandler+0x3dc>)
 8002e10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fd02 	bl	8001820 <HAL_DMA_Abort_IT>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	e00e      	b.n	8002e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f99a 	bl	800316c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e38:	e00a      	b.n	8002e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f996 	bl	800316c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	e006      	b.n	8002e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f992 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e4e:	e170      	b.n	8003132 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	bf00      	nop
    return;
 8002e52:	e16e      	b.n	8003132 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	f040 814a 	bne.w	80030f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8143 	beq.w	80030f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 813c 	beq.w	80030f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	f040 80b4 	bne.w	8003008 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8140 	beq.w	8003136 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	f080 8139 	bcs.w	8003136 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed6:	f000 8088 	beq.w	8002fea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	330c      	adds	r3, #12
 8002ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d9      	bne.n	8002eda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3314      	adds	r3, #20
 8002f2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3314      	adds	r3, #20
 8002f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e1      	bne.n	8002f26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3314      	adds	r3, #20
 8002f68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3314      	adds	r3, #20
 8002f82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e3      	bne.n	8002f62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fba:	f023 0310 	bic.w	r3, r3, #16
 8002fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002fcc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002fce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e3      	bne.n	8002fa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fe fbab 	bl	8001740 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f8c0 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003000:	e099      	b.n	8003136 <HAL_UART_IRQHandler+0x50e>
 8003002:	bf00      	nop
 8003004:	080036b7 	.word	0x080036b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 808b 	beq.w	800313a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8086 	beq.w	800313a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	330c      	adds	r3, #12
 8003034:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	330c      	adds	r3, #12
 800304e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003052:	647a      	str	r2, [r7, #68]	; 0x44
 8003054:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e3      	bne.n	800302e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	e853 3f00 	ldrex	r3, [r3]
 8003074:	623b      	str	r3, [r7, #32]
   return(result);
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3314      	adds	r3, #20
 8003086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800308a:	633a      	str	r2, [r7, #48]	; 0x30
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003092:	e841 2300 	strex	r3, r2, [r1]
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1e3      	bne.n	8003066 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	330c      	adds	r3, #12
 80030b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0310 	bic.w	r3, r3, #16
 80030c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030d0:	61fa      	str	r2, [r7, #28]
 80030d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	69b9      	ldr	r1, [r7, #24]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	617b      	str	r3, [r7, #20]
   return(result);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e3      	bne.n	80030ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f848 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030f0:	e023      	b.n	800313a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_UART_IRQHandler+0x4ea>
 80030fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fae7 	bl	80036de <UART_Transmit_IT>
    return;
 8003110:	e014      	b.n	800313c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00e      	beq.n	800313c <HAL_UART_IRQHandler+0x514>
 800311e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fb27 	bl	800377e <UART_EndTransmit_IT>
    return;
 8003130:	e004      	b.n	800313c <HAL_UART_IRQHandler+0x514>
    return;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <HAL_UART_IRQHandler+0x514>
      return;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_UART_IRQHandler+0x514>
      return;
 800313a:	bf00      	nop
  }
}
 800313c:	37e8      	adds	r7, #232	; 0xe8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop

08003144 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b09c      	sub	sp, #112	; 0x70
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d172      	bne.n	800329a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80031b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b6:	2200      	movs	r2, #0
 80031b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031da:	65ba      	str	r2, [r7, #88]	; 0x58
 80031dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e5      	bne.n	80031ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	667b      	str	r3, [r7, #100]	; 0x64
 8003206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3314      	adds	r3, #20
 800320c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800320e:	647a      	str	r2, [r7, #68]	; 0x44
 8003210:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003216:	e841 2300 	strex	r3, r2, [r1]
 800321a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800321c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e5      	bne.n	80031ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3314      	adds	r3, #20
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	e853 3f00 	ldrex	r3, [r3]
 8003230:	623b      	str	r3, [r7, #32]
   return(result);
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003238:	663b      	str	r3, [r7, #96]	; 0x60
 800323a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3314      	adds	r3, #20
 8003240:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003242:	633a      	str	r2, [r7, #48]	; 0x30
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1e5      	bne.n	8003222 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	2b01      	cmp	r3, #1
 8003264:	d119      	bne.n	800329a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	60fb      	str	r3, [r7, #12]
   return(result);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f023 0310 	bic.w	r3, r3, #16
 800327c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003286:	61fa      	str	r2, [r7, #28]
 8003288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	617b      	str	r3, [r7, #20]
   return(result);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e5      	bne.n	8003266 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800329a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d106      	bne.n	80032b0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a6:	4619      	mov	r1, r3
 80032a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032aa:	f7ff ff69 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032ae:	e002      	b.n	80032b6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80032b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80032b2:	f7fd fad1 	bl	8000858 <HAL_UART_RxCpltCallback>
}
 80032b6:	bf00      	nop
 80032b8:	3770      	adds	r7, #112	; 0x70
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4619      	mov	r1, r3
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff ff4e 	bl	8003180 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032e4:	e002      	b.n	80032ec <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff36 	bl	8003158 <HAL_UART_RxHalfCpltCallback>
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b21      	cmp	r3, #33	; 0x21
 8003326:	d108      	bne.n	800333a <UART_DMAError+0x46>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d005      	beq.n	800333a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2200      	movs	r2, #0
 8003332:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003334:	68b8      	ldr	r0, [r7, #8]
 8003336:	f000 f933 	bl	80035a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b22      	cmp	r3, #34	; 0x22
 800335a:	d108      	bne.n	800336e <UART_DMAError+0x7a>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2200      	movs	r2, #0
 8003366:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003368:	68b8      	ldr	r0, [r7, #8]
 800336a:	f000 f941 	bl	80035f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0210 	orr.w	r2, r3, #16
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	f7ff fef6 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b090      	sub	sp, #64	; 0x40
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003398:	e050      	b.n	800343c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d04c      	beq.n	800343c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80033a8:	f7fd ffa6 	bl	80012f8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d241      	bcs.n	800343c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	330c      	adds	r3, #12
 80033d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d8:	637a      	str	r2, [r7, #52]	; 0x34
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e5      	bne.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	e853 3f00 	ldrex	r3, [r3]
 80033fa:	613b      	str	r3, [r7, #16]
   return(result);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	63bb      	str	r3, [r7, #56]	; 0x38
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3314      	adds	r3, #20
 800340a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340c:	623a      	str	r2, [r7, #32]
 800340e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	69f9      	ldr	r1, [r7, #28]
 8003412:	6a3a      	ldr	r2, [r7, #32]
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	61bb      	str	r3, [r7, #24]
   return(result);
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e5      	bne.n	80033ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e00f      	b.n	800345c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	429a      	cmp	r2, r3
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	429a      	cmp	r2, r3
 8003458:	d09f      	beq.n	800339a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3740      	adds	r7, #64	; 0x40
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b098      	sub	sp, #96	; 0x60
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2222      	movs	r2, #34	; 0x22
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	4a40      	ldr	r2, [pc, #256]	; (8003594 <UART_Start_Receive_DMA+0x130>)
 8003492:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	4a3f      	ldr	r2, [pc, #252]	; (8003598 <UART_Start_Receive_DMA+0x134>)
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	4a3e      	ldr	r2, [pc, #248]	; (800359c <UART_Start_Receive_DMA+0x138>)
 80034a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	2200      	movs	r2, #0
 80034aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	f7fe f8e4 	bl	8001690 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d019      	beq.n	8003522 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	65bb      	str	r3, [r7, #88]	; 0x58
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	330c      	adds	r3, #12
 800350c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800350e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003510:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003514:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e5      	bne.n	80034ee <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3314      	adds	r3, #20
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	657b      	str	r3, [r7, #84]	; 0x54
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003542:	63ba      	str	r2, [r7, #56]	; 0x38
 8003544:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003546:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800354a:	e841 2300 	strex	r3, r2, [r1]
 800354e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1e5      	bne.n	8003522 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3314      	adds	r3, #20
 800355c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	617b      	str	r3, [r7, #20]
   return(result);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800356c:	653b      	str	r3, [r7, #80]	; 0x50
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3314      	adds	r3, #20
 8003574:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003576:	627a      	str	r2, [r7, #36]	; 0x24
 8003578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6a39      	ldr	r1, [r7, #32]
 800357c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	61fb      	str	r3, [r7, #28]
   return(result);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3760      	adds	r7, #96	; 0x60
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	08003199 	.word	0x08003199
 8003598:	080032bf 	.word	0x080032bf
 800359c:	080032f5 	.word	0x080032f5

080035a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	61ba      	str	r2, [r7, #24]
 80035ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6979      	ldr	r1, [r7, #20]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	613b      	str	r3, [r7, #16]
   return(result);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80035e4:	bf00      	nop
 80035e6:	3724      	adds	r7, #36	; 0x24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b095      	sub	sp, #84	; 0x54
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003602:	e853 3f00 	ldrex	r3, [r3]
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800360e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003618:	643a      	str	r2, [r7, #64]	; 0x40
 800361a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800361e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003620:	e841 2300 	strex	r3, r2, [r1]
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e5      	bne.n	80035f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3314      	adds	r3, #20
 8003632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	61fb      	str	r3, [r7, #28]
   return(result);
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3314      	adds	r3, #20
 800364a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800364c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800364e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e5      	bne.n	800362c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	2b01      	cmp	r3, #1
 8003666:	d119      	bne.n	800369c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	60bb      	str	r3, [r7, #8]
   return(result);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f023 0310 	bic.w	r3, r3, #16
 800367e:	647b      	str	r3, [r7, #68]	; 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003688:	61ba      	str	r2, [r7, #24]
 800368a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6979      	ldr	r1, [r7, #20]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	613b      	str	r3, [r7, #16]
   return(result);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036aa:	bf00      	nop
 80036ac:	3754      	adds	r7, #84	; 0x54
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fd4b 	bl	800316c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b21      	cmp	r3, #33	; 0x21
 80036f0:	d13e      	bne.n	8003770 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fa:	d114      	bne.n	8003726 <UART_Transmit_IT+0x48>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d110      	bne.n	8003726 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003718:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	1c9a      	adds	r2, r3, #2
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	621a      	str	r2, [r3, #32]
 8003724:	e008      	b.n	8003738 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	1c59      	adds	r1, r3, #1
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6211      	str	r1, [r2, #32]
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29b      	uxth	r3, r3
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4619      	mov	r1, r3
 8003746:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10f      	bne.n	800376c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800375a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800376a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003794:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fcd0 	bl	8003144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b08c      	sub	sp, #48	; 0x30
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b22      	cmp	r3, #34	; 0x22
 80037c0:	f040 80ab 	bne.w	800391a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d117      	bne.n	80037fe <UART_Receive_IT+0x50>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d113      	bne.n	80037fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	1c9a      	adds	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
 80037fc:	e026      	b.n	800384c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d007      	beq.n	8003822 <UART_Receive_IT+0x74>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <UART_Receive_IT+0x82>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e008      	b.n	8003842 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383c:	b2da      	uxtb	r2, r3
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4619      	mov	r1, r3
 800385a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800385c:	2b00      	cmp	r3, #0
 800385e:	d15a      	bne.n	8003916 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0220 	bic.w	r2, r2, #32
 800386e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800387e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	2b01      	cmp	r3, #1
 800389e:	d135      	bne.n	800390c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	330c      	adds	r3, #12
 80038ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	613b      	str	r3, [r7, #16]
   return(result);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f023 0310 	bic.w	r3, r3, #16
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	623a      	str	r2, [r7, #32]
 80038c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	69f9      	ldr	r1, [r7, #28]
 80038cc:	6a3a      	ldr	r2, [r7, #32]
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e5      	bne.n	80038a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d10a      	bne.n	80038fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fc3b 	bl	8003180 <HAL_UARTEx_RxEventCallback>
 800390a:	e002      	b.n	8003912 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fc ffa3 	bl	8000858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e002      	b.n	800391c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3730      	adds	r7, #48	; 0x30
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003928:	b0c0      	sub	sp, #256	; 0x100
 800392a:	af00      	add	r7, sp, #0
 800392c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	68d9      	ldr	r1, [r3, #12]
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	ea40 0301 	orr.w	r3, r0, r1
 800394c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	431a      	orrs	r2, r3
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	431a      	orrs	r2, r3
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800397c:	f021 010c 	bic.w	r1, r1, #12
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800398a:	430b      	orrs	r3, r1
 800398c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	6999      	ldr	r1, [r3, #24]
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	ea40 0301 	orr.w	r3, r0, r1
 80039aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	4b8f      	ldr	r3, [pc, #572]	; (8003bf0 <UART_SetConfig+0x2cc>)
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d005      	beq.n	80039c4 <UART_SetConfig+0xa0>
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4b8d      	ldr	r3, [pc, #564]	; (8003bf4 <UART_SetConfig+0x2d0>)
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d104      	bne.n	80039ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039c4:	f7ff f80c 	bl	80029e0 <HAL_RCC_GetPCLK2Freq>
 80039c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039cc:	e003      	b.n	80039d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ce:	f7fe fff3 	bl	80029b8 <HAL_RCC_GetPCLK1Freq>
 80039d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e0:	f040 810c 	bne.w	8003bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039f6:	4622      	mov	r2, r4
 80039f8:	462b      	mov	r3, r5
 80039fa:	1891      	adds	r1, r2, r2
 80039fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80039fe:	415b      	adcs	r3, r3
 8003a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a06:	4621      	mov	r1, r4
 8003a08:	eb12 0801 	adds.w	r8, r2, r1
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	eb43 0901 	adc.w	r9, r3, r1
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a26:	4690      	mov	r8, r2
 8003a28:	4699      	mov	r9, r3
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	eb18 0303 	adds.w	r3, r8, r3
 8003a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a34:	462b      	mov	r3, r5
 8003a36:	eb49 0303 	adc.w	r3, r9, r3
 8003a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a52:	460b      	mov	r3, r1
 8003a54:	18db      	adds	r3, r3, r3
 8003a56:	653b      	str	r3, [r7, #80]	; 0x50
 8003a58:	4613      	mov	r3, r2
 8003a5a:	eb42 0303 	adc.w	r3, r2, r3
 8003a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a68:	f7fc fc12 	bl	8000290 <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4b61      	ldr	r3, [pc, #388]	; (8003bf8 <UART_SetConfig+0x2d4>)
 8003a72:	fba3 2302 	umull	r2, r3, r3, r2
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	011c      	lsls	r4, r3, #4
 8003a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	1891      	adds	r1, r2, r2
 8003a92:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a94:	415b      	adcs	r3, r3
 8003a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003abc:	4692      	mov	sl, r2
 8003abe:	469b      	mov	fp, r3
 8003ac0:	4643      	mov	r3, r8
 8003ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aca:	464b      	mov	r3, r9
 8003acc:	eb4b 0303 	adc.w	r3, fp, r3
 8003ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	18db      	adds	r3, r3, r3
 8003aec:	643b      	str	r3, [r7, #64]	; 0x40
 8003aee:	4613      	mov	r3, r2
 8003af0:	eb42 0303 	adc.w	r3, r2, r3
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
 8003af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003afe:	f7fc fbc7 	bl	8000290 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <UART_SetConfig+0x2d4>)
 8003b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2264      	movs	r2, #100	; 0x64
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	1acb      	subs	r3, r1, r3
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b1e:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <UART_SetConfig+0x2d4>)
 8003b20:	fba3 2302 	umull	r2, r3, r3, r2
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b2c:	441c      	add	r4, r3
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b50:	4641      	mov	r1, r8
 8003b52:	1851      	adds	r1, r2, r1
 8003b54:	6339      	str	r1, [r7, #48]	; 0x30
 8003b56:	4649      	mov	r1, r9
 8003b58:	414b      	adcs	r3, r1
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b68:	4659      	mov	r1, fp
 8003b6a:	00cb      	lsls	r3, r1, #3
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b72:	4651      	mov	r1, sl
 8003b74:	00ca      	lsls	r2, r1, #3
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b84:	464b      	mov	r3, r9
 8003b86:	460a      	mov	r2, r1
 8003b88:	eb42 0303 	adc.w	r3, r2, r3
 8003b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	18db      	adds	r3, r3, r3
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003baa:	4613      	mov	r3, r2
 8003bac:	eb42 0303 	adc.w	r3, r2, r3
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bba:	f7fc fb69 	bl	8000290 <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <UART_SetConfig+0x2d4>)
 8003bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	2164      	movs	r1, #100	; 0x64
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	3332      	adds	r3, #50	; 0x32
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <UART_SetConfig+0x2d4>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	f003 0207 	and.w	r2, r3, #7
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4422      	add	r2, r4
 8003bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bec:	e105      	b.n	8003dfa <UART_SetConfig+0x4d6>
 8003bee:	bf00      	nop
 8003bf0:	40011000 	.word	0x40011000
 8003bf4:	40011400 	.word	0x40011400
 8003bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c00:	2200      	movs	r2, #0
 8003c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c0e:	4642      	mov	r2, r8
 8003c10:	464b      	mov	r3, r9
 8003c12:	1891      	adds	r1, r2, r2
 8003c14:	6239      	str	r1, [r7, #32]
 8003c16:	415b      	adcs	r3, r3
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c1e:	4641      	mov	r1, r8
 8003c20:	1854      	adds	r4, r2, r1
 8003c22:	4649      	mov	r1, r9
 8003c24:	eb43 0501 	adc.w	r5, r3, r1
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	00eb      	lsls	r3, r5, #3
 8003c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c36:	00e2      	lsls	r2, r4, #3
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	4643      	mov	r3, r8
 8003c3e:	18e3      	adds	r3, r4, r3
 8003c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c44:	464b      	mov	r3, r9
 8003c46:	eb45 0303 	adc.w	r3, r5, r3
 8003c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	008b      	lsls	r3, r1, #2
 8003c6e:	4621      	mov	r1, r4
 8003c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c74:	4621      	mov	r1, r4
 8003c76:	008a      	lsls	r2, r1, #2
 8003c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c7c:	f7fc fb08 	bl	8000290 <__aeabi_uldivmod>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4b60      	ldr	r3, [pc, #384]	; (8003e08 <UART_SetConfig+0x4e4>)
 8003c86:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	011c      	lsls	r4, r3, #4
 8003c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	1891      	adds	r1, r2, r2
 8003ca6:	61b9      	str	r1, [r7, #24]
 8003ca8:	415b      	adcs	r3, r3
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	1851      	adds	r1, r2, r1
 8003cb4:	6139      	str	r1, [r7, #16]
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	414b      	adcs	r3, r1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc8:	4659      	mov	r1, fp
 8003cca:	00cb      	lsls	r3, r1, #3
 8003ccc:	4651      	mov	r1, sl
 8003cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	00ca      	lsls	r2, r1, #3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4642      	mov	r2, r8
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	460a      	mov	r2, r1
 8003ce8:	eb42 0303 	adc.w	r3, r2, r3
 8003cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d08:	4649      	mov	r1, r9
 8003d0a:	008b      	lsls	r3, r1, #2
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d12:	4641      	mov	r1, r8
 8003d14:	008a      	lsls	r2, r1, #2
 8003d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d1a:	f7fc fab9 	bl	8000290 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4b39      	ldr	r3, [pc, #228]	; (8003e08 <UART_SetConfig+0x4e4>)
 8003d24:	fba3 1302 	umull	r1, r3, r3, r2
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	2164      	movs	r1, #100	; 0x64
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	3332      	adds	r3, #50	; 0x32
 8003d36:	4a34      	ldr	r2, [pc, #208]	; (8003e08 <UART_SetConfig+0x4e4>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d42:	441c      	add	r4, r3
 8003d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d48:	2200      	movs	r2, #0
 8003d4a:	673b      	str	r3, [r7, #112]	; 0x70
 8003d4c:	677a      	str	r2, [r7, #116]	; 0x74
 8003d4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d52:	4642      	mov	r2, r8
 8003d54:	464b      	mov	r3, r9
 8003d56:	1891      	adds	r1, r2, r2
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	415b      	adcs	r3, r3
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d62:	4641      	mov	r1, r8
 8003d64:	1851      	adds	r1, r2, r1
 8003d66:	6039      	str	r1, [r7, #0]
 8003d68:	4649      	mov	r1, r9
 8003d6a:	414b      	adcs	r3, r1
 8003d6c:	607b      	str	r3, [r7, #4]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d7a:	4659      	mov	r1, fp
 8003d7c:	00cb      	lsls	r3, r1, #3
 8003d7e:	4651      	mov	r1, sl
 8003d80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d84:	4651      	mov	r1, sl
 8003d86:	00ca      	lsls	r2, r1, #3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4642      	mov	r2, r8
 8003d90:	189b      	adds	r3, r3, r2
 8003d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d94:	464b      	mov	r3, r9
 8003d96:	460a      	mov	r2, r1
 8003d98:	eb42 0303 	adc.w	r3, r2, r3
 8003d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	663b      	str	r3, [r7, #96]	; 0x60
 8003da8:	667a      	str	r2, [r7, #100]	; 0x64
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003db6:	4649      	mov	r1, r9
 8003db8:	008b      	lsls	r3, r1, #2
 8003dba:	4641      	mov	r1, r8
 8003dbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	008a      	lsls	r2, r1, #2
 8003dc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dc8:	f7fc fa62 	bl	8000290 <__aeabi_uldivmod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <UART_SetConfig+0x4e4>)
 8003dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2164      	movs	r1, #100	; 0x64
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	3332      	adds	r3, #50	; 0x32
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <UART_SetConfig+0x4e4>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	f003 020f 	and.w	r2, r3, #15
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4422      	add	r2, r4
 8003df8:	609a      	str	r2, [r3, #8]
}
 8003dfa:	bf00      	nop
 8003dfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e06:	bf00      	nop
 8003e08:	51eb851f 	.word	0x51eb851f

08003e0c <__errno>:
 8003e0c:	4b01      	ldr	r3, [pc, #4]	; (8003e14 <__errno+0x8>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000014 	.word	0x20000014

08003e18 <__libc_init_array>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	4d0d      	ldr	r5, [pc, #52]	; (8003e50 <__libc_init_array+0x38>)
 8003e1c:	4c0d      	ldr	r4, [pc, #52]	; (8003e54 <__libc_init_array+0x3c>)
 8003e1e:	1b64      	subs	r4, r4, r5
 8003e20:	10a4      	asrs	r4, r4, #2
 8003e22:	2600      	movs	r6, #0
 8003e24:	42a6      	cmp	r6, r4
 8003e26:	d109      	bne.n	8003e3c <__libc_init_array+0x24>
 8003e28:	4d0b      	ldr	r5, [pc, #44]	; (8003e58 <__libc_init_array+0x40>)
 8003e2a:	4c0c      	ldr	r4, [pc, #48]	; (8003e5c <__libc_init_array+0x44>)
 8003e2c:	f000 fc8e 	bl	800474c <_init>
 8003e30:	1b64      	subs	r4, r4, r5
 8003e32:	10a4      	asrs	r4, r4, #2
 8003e34:	2600      	movs	r6, #0
 8003e36:	42a6      	cmp	r6, r4
 8003e38:	d105      	bne.n	8003e46 <__libc_init_array+0x2e>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e40:	4798      	blx	r3
 8003e42:	3601      	adds	r6, #1
 8003e44:	e7ee      	b.n	8003e24 <__libc_init_array+0xc>
 8003e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4a:	4798      	blx	r3
 8003e4c:	3601      	adds	r6, #1
 8003e4e:	e7f2      	b.n	8003e36 <__libc_init_array+0x1e>
 8003e50:	08004a78 	.word	0x08004a78
 8003e54:	08004a78 	.word	0x08004a78
 8003e58:	08004a78 	.word	0x08004a78
 8003e5c:	08004a7c 	.word	0x08004a7c

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <siprintf>:
 8003e70:	b40e      	push	{r1, r2, r3}
 8003e72:	b500      	push	{lr}
 8003e74:	b09c      	sub	sp, #112	; 0x70
 8003e76:	ab1d      	add	r3, sp, #116	; 0x74
 8003e78:	9002      	str	r0, [sp, #8]
 8003e7a:	9006      	str	r0, [sp, #24]
 8003e7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e80:	4809      	ldr	r0, [pc, #36]	; (8003ea8 <siprintf+0x38>)
 8003e82:	9107      	str	r1, [sp, #28]
 8003e84:	9104      	str	r1, [sp, #16]
 8003e86:	4909      	ldr	r1, [pc, #36]	; (8003eac <siprintf+0x3c>)
 8003e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e8c:	9105      	str	r1, [sp, #20]
 8003e8e:	6800      	ldr	r0, [r0, #0]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	a902      	add	r1, sp, #8
 8003e94:	f000 f868 	bl	8003f68 <_svfiprintf_r>
 8003e98:	9b02      	ldr	r3, [sp, #8]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	b01c      	add	sp, #112	; 0x70
 8003ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ea4:	b003      	add	sp, #12
 8003ea6:	4770      	bx	lr
 8003ea8:	20000014 	.word	0x20000014
 8003eac:	ffff0208 	.word	0xffff0208

08003eb0 <__ssputs_r>:
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	688e      	ldr	r6, [r1, #8]
 8003eb6:	429e      	cmp	r6, r3
 8003eb8:	4682      	mov	sl, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4690      	mov	r8, r2
 8003ebe:	461f      	mov	r7, r3
 8003ec0:	d838      	bhi.n	8003f34 <__ssputs_r+0x84>
 8003ec2:	898a      	ldrh	r2, [r1, #12]
 8003ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ec8:	d032      	beq.n	8003f30 <__ssputs_r+0x80>
 8003eca:	6825      	ldr	r5, [r4, #0]
 8003ecc:	6909      	ldr	r1, [r1, #16]
 8003ece:	eba5 0901 	sub.w	r9, r5, r1
 8003ed2:	6965      	ldr	r5, [r4, #20]
 8003ed4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003edc:	3301      	adds	r3, #1
 8003ede:	444b      	add	r3, r9
 8003ee0:	106d      	asrs	r5, r5, #1
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	bf38      	it	cc
 8003ee6:	461d      	movcc	r5, r3
 8003ee8:	0553      	lsls	r3, r2, #21
 8003eea:	d531      	bpl.n	8003f50 <__ssputs_r+0xa0>
 8003eec:	4629      	mov	r1, r5
 8003eee:	f000 fb63 	bl	80045b8 <_malloc_r>
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	b950      	cbnz	r0, 8003f0c <__ssputs_r+0x5c>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	f8ca 3000 	str.w	r3, [sl]
 8003efc:	89a3      	ldrh	r3, [r4, #12]
 8003efe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f02:	81a3      	strh	r3, [r4, #12]
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0c:	6921      	ldr	r1, [r4, #16]
 8003f0e:	464a      	mov	r2, r9
 8003f10:	f000 fabe 	bl	8004490 <memcpy>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	6126      	str	r6, [r4, #16]
 8003f22:	6165      	str	r5, [r4, #20]
 8003f24:	444e      	add	r6, r9
 8003f26:	eba5 0509 	sub.w	r5, r5, r9
 8003f2a:	6026      	str	r6, [r4, #0]
 8003f2c:	60a5      	str	r5, [r4, #8]
 8003f2e:	463e      	mov	r6, r7
 8003f30:	42be      	cmp	r6, r7
 8003f32:	d900      	bls.n	8003f36 <__ssputs_r+0x86>
 8003f34:	463e      	mov	r6, r7
 8003f36:	6820      	ldr	r0, [r4, #0]
 8003f38:	4632      	mov	r2, r6
 8003f3a:	4641      	mov	r1, r8
 8003f3c:	f000 fab6 	bl	80044ac <memmove>
 8003f40:	68a3      	ldr	r3, [r4, #8]
 8003f42:	1b9b      	subs	r3, r3, r6
 8003f44:	60a3      	str	r3, [r4, #8]
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	4433      	add	r3, r6
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	e7db      	b.n	8003f08 <__ssputs_r+0x58>
 8003f50:	462a      	mov	r2, r5
 8003f52:	f000 fba5 	bl	80046a0 <_realloc_r>
 8003f56:	4606      	mov	r6, r0
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d1e1      	bne.n	8003f20 <__ssputs_r+0x70>
 8003f5c:	6921      	ldr	r1, [r4, #16]
 8003f5e:	4650      	mov	r0, sl
 8003f60:	f000 fabe 	bl	80044e0 <_free_r>
 8003f64:	e7c7      	b.n	8003ef6 <__ssputs_r+0x46>
	...

08003f68 <_svfiprintf_r>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	4698      	mov	r8, r3
 8003f6e:	898b      	ldrh	r3, [r1, #12]
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	b09d      	sub	sp, #116	; 0x74
 8003f74:	4607      	mov	r7, r0
 8003f76:	460d      	mov	r5, r1
 8003f78:	4614      	mov	r4, r2
 8003f7a:	d50e      	bpl.n	8003f9a <_svfiprintf_r+0x32>
 8003f7c:	690b      	ldr	r3, [r1, #16]
 8003f7e:	b963      	cbnz	r3, 8003f9a <_svfiprintf_r+0x32>
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	f000 fb19 	bl	80045b8 <_malloc_r>
 8003f86:	6028      	str	r0, [r5, #0]
 8003f88:	6128      	str	r0, [r5, #16]
 8003f8a:	b920      	cbnz	r0, 8003f96 <_svfiprintf_r+0x2e>
 8003f8c:	230c      	movs	r3, #12
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	e0d1      	b.n	800413a <_svfiprintf_r+0x1d2>
 8003f96:	2340      	movs	r3, #64	; 0x40
 8003f98:	616b      	str	r3, [r5, #20]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fa8:	2330      	movs	r3, #48	; 0x30
 8003faa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004154 <_svfiprintf_r+0x1ec>
 8003fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fb2:	f04f 0901 	mov.w	r9, #1
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	469a      	mov	sl, r3
 8003fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fbe:	b10a      	cbz	r2, 8003fc4 <_svfiprintf_r+0x5c>
 8003fc0:	2a25      	cmp	r2, #37	; 0x25
 8003fc2:	d1f9      	bne.n	8003fb8 <_svfiprintf_r+0x50>
 8003fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8003fc8:	d00b      	beq.n	8003fe2 <_svfiprintf_r+0x7a>
 8003fca:	465b      	mov	r3, fp
 8003fcc:	4622      	mov	r2, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	f7ff ff6d 	bl	8003eb0 <__ssputs_r>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	f000 80aa 	beq.w	8004130 <_svfiprintf_r+0x1c8>
 8003fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fde:	445a      	add	r2, fp
 8003fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8003fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80a2 	beq.w	8004130 <_svfiprintf_r+0x1c8>
 8003fec:	2300      	movs	r3, #0
 8003fee:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ff6:	f10a 0a01 	add.w	sl, sl, #1
 8003ffa:	9304      	str	r3, [sp, #16]
 8003ffc:	9307      	str	r3, [sp, #28]
 8003ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004002:	931a      	str	r3, [sp, #104]	; 0x68
 8004004:	4654      	mov	r4, sl
 8004006:	2205      	movs	r2, #5
 8004008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800400c:	4851      	ldr	r0, [pc, #324]	; (8004154 <_svfiprintf_r+0x1ec>)
 800400e:	f7fc f8ef 	bl	80001f0 <memchr>
 8004012:	9a04      	ldr	r2, [sp, #16]
 8004014:	b9d8      	cbnz	r0, 800404e <_svfiprintf_r+0xe6>
 8004016:	06d0      	lsls	r0, r2, #27
 8004018:	bf44      	itt	mi
 800401a:	2320      	movmi	r3, #32
 800401c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004020:	0711      	lsls	r1, r2, #28
 8004022:	bf44      	itt	mi
 8004024:	232b      	movmi	r3, #43	; 0x2b
 8004026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800402a:	f89a 3000 	ldrb.w	r3, [sl]
 800402e:	2b2a      	cmp	r3, #42	; 0x2a
 8004030:	d015      	beq.n	800405e <_svfiprintf_r+0xf6>
 8004032:	9a07      	ldr	r2, [sp, #28]
 8004034:	4654      	mov	r4, sl
 8004036:	2000      	movs	r0, #0
 8004038:	f04f 0c0a 	mov.w	ip, #10
 800403c:	4621      	mov	r1, r4
 800403e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004042:	3b30      	subs	r3, #48	; 0x30
 8004044:	2b09      	cmp	r3, #9
 8004046:	d94e      	bls.n	80040e6 <_svfiprintf_r+0x17e>
 8004048:	b1b0      	cbz	r0, 8004078 <_svfiprintf_r+0x110>
 800404a:	9207      	str	r2, [sp, #28]
 800404c:	e014      	b.n	8004078 <_svfiprintf_r+0x110>
 800404e:	eba0 0308 	sub.w	r3, r0, r8
 8004052:	fa09 f303 	lsl.w	r3, r9, r3
 8004056:	4313      	orrs	r3, r2
 8004058:	9304      	str	r3, [sp, #16]
 800405a:	46a2      	mov	sl, r4
 800405c:	e7d2      	b.n	8004004 <_svfiprintf_r+0x9c>
 800405e:	9b03      	ldr	r3, [sp, #12]
 8004060:	1d19      	adds	r1, r3, #4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	9103      	str	r1, [sp, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	bfbb      	ittet	lt
 800406a:	425b      	neglt	r3, r3
 800406c:	f042 0202 	orrlt.w	r2, r2, #2
 8004070:	9307      	strge	r3, [sp, #28]
 8004072:	9307      	strlt	r3, [sp, #28]
 8004074:	bfb8      	it	lt
 8004076:	9204      	strlt	r2, [sp, #16]
 8004078:	7823      	ldrb	r3, [r4, #0]
 800407a:	2b2e      	cmp	r3, #46	; 0x2e
 800407c:	d10c      	bne.n	8004098 <_svfiprintf_r+0x130>
 800407e:	7863      	ldrb	r3, [r4, #1]
 8004080:	2b2a      	cmp	r3, #42	; 0x2a
 8004082:	d135      	bne.n	80040f0 <_svfiprintf_r+0x188>
 8004084:	9b03      	ldr	r3, [sp, #12]
 8004086:	1d1a      	adds	r2, r3, #4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	9203      	str	r2, [sp, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	bfb8      	it	lt
 8004090:	f04f 33ff 	movlt.w	r3, #4294967295
 8004094:	3402      	adds	r4, #2
 8004096:	9305      	str	r3, [sp, #20]
 8004098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004164 <_svfiprintf_r+0x1fc>
 800409c:	7821      	ldrb	r1, [r4, #0]
 800409e:	2203      	movs	r2, #3
 80040a0:	4650      	mov	r0, sl
 80040a2:	f7fc f8a5 	bl	80001f0 <memchr>
 80040a6:	b140      	cbz	r0, 80040ba <_svfiprintf_r+0x152>
 80040a8:	2340      	movs	r3, #64	; 0x40
 80040aa:	eba0 000a 	sub.w	r0, r0, sl
 80040ae:	fa03 f000 	lsl.w	r0, r3, r0
 80040b2:	9b04      	ldr	r3, [sp, #16]
 80040b4:	4303      	orrs	r3, r0
 80040b6:	3401      	adds	r4, #1
 80040b8:	9304      	str	r3, [sp, #16]
 80040ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040be:	4826      	ldr	r0, [pc, #152]	; (8004158 <_svfiprintf_r+0x1f0>)
 80040c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040c4:	2206      	movs	r2, #6
 80040c6:	f7fc f893 	bl	80001f0 <memchr>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d038      	beq.n	8004140 <_svfiprintf_r+0x1d8>
 80040ce:	4b23      	ldr	r3, [pc, #140]	; (800415c <_svfiprintf_r+0x1f4>)
 80040d0:	bb1b      	cbnz	r3, 800411a <_svfiprintf_r+0x1b2>
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	3307      	adds	r3, #7
 80040d6:	f023 0307 	bic.w	r3, r3, #7
 80040da:	3308      	adds	r3, #8
 80040dc:	9303      	str	r3, [sp, #12]
 80040de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e0:	4433      	add	r3, r6
 80040e2:	9309      	str	r3, [sp, #36]	; 0x24
 80040e4:	e767      	b.n	8003fb6 <_svfiprintf_r+0x4e>
 80040e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80040ea:	460c      	mov	r4, r1
 80040ec:	2001      	movs	r0, #1
 80040ee:	e7a5      	b.n	800403c <_svfiprintf_r+0xd4>
 80040f0:	2300      	movs	r3, #0
 80040f2:	3401      	adds	r4, #1
 80040f4:	9305      	str	r3, [sp, #20]
 80040f6:	4619      	mov	r1, r3
 80040f8:	f04f 0c0a 	mov.w	ip, #10
 80040fc:	4620      	mov	r0, r4
 80040fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004102:	3a30      	subs	r2, #48	; 0x30
 8004104:	2a09      	cmp	r2, #9
 8004106:	d903      	bls.n	8004110 <_svfiprintf_r+0x1a8>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0c5      	beq.n	8004098 <_svfiprintf_r+0x130>
 800410c:	9105      	str	r1, [sp, #20]
 800410e:	e7c3      	b.n	8004098 <_svfiprintf_r+0x130>
 8004110:	fb0c 2101 	mla	r1, ip, r1, r2
 8004114:	4604      	mov	r4, r0
 8004116:	2301      	movs	r3, #1
 8004118:	e7f0      	b.n	80040fc <_svfiprintf_r+0x194>
 800411a:	ab03      	add	r3, sp, #12
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	462a      	mov	r2, r5
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <_svfiprintf_r+0x1f8>)
 8004122:	a904      	add	r1, sp, #16
 8004124:	4638      	mov	r0, r7
 8004126:	f3af 8000 	nop.w
 800412a:	1c42      	adds	r2, r0, #1
 800412c:	4606      	mov	r6, r0
 800412e:	d1d6      	bne.n	80040de <_svfiprintf_r+0x176>
 8004130:	89ab      	ldrh	r3, [r5, #12]
 8004132:	065b      	lsls	r3, r3, #25
 8004134:	f53f af2c 	bmi.w	8003f90 <_svfiprintf_r+0x28>
 8004138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800413a:	b01d      	add	sp, #116	; 0x74
 800413c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004140:	ab03      	add	r3, sp, #12
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	462a      	mov	r2, r5
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <_svfiprintf_r+0x1f8>)
 8004148:	a904      	add	r1, sp, #16
 800414a:	4638      	mov	r0, r7
 800414c:	f000 f87a 	bl	8004244 <_printf_i>
 8004150:	e7eb      	b.n	800412a <_svfiprintf_r+0x1c2>
 8004152:	bf00      	nop
 8004154:	08004a3c 	.word	0x08004a3c
 8004158:	08004a46 	.word	0x08004a46
 800415c:	00000000 	.word	0x00000000
 8004160:	08003eb1 	.word	0x08003eb1
 8004164:	08004a42 	.word	0x08004a42

08004168 <_printf_common>:
 8004168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800416c:	4616      	mov	r6, r2
 800416e:	4699      	mov	r9, r3
 8004170:	688a      	ldr	r2, [r1, #8]
 8004172:	690b      	ldr	r3, [r1, #16]
 8004174:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004178:	4293      	cmp	r3, r2
 800417a:	bfb8      	it	lt
 800417c:	4613      	movlt	r3, r2
 800417e:	6033      	str	r3, [r6, #0]
 8004180:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004184:	4607      	mov	r7, r0
 8004186:	460c      	mov	r4, r1
 8004188:	b10a      	cbz	r2, 800418e <_printf_common+0x26>
 800418a:	3301      	adds	r3, #1
 800418c:	6033      	str	r3, [r6, #0]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	0699      	lsls	r1, r3, #26
 8004192:	bf42      	ittt	mi
 8004194:	6833      	ldrmi	r3, [r6, #0]
 8004196:	3302      	addmi	r3, #2
 8004198:	6033      	strmi	r3, [r6, #0]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	f015 0506 	ands.w	r5, r5, #6
 80041a0:	d106      	bne.n	80041b0 <_printf_common+0x48>
 80041a2:	f104 0a19 	add.w	sl, r4, #25
 80041a6:	68e3      	ldr	r3, [r4, #12]
 80041a8:	6832      	ldr	r2, [r6, #0]
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	42ab      	cmp	r3, r5
 80041ae:	dc26      	bgt.n	80041fe <_printf_common+0x96>
 80041b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041b4:	1e13      	subs	r3, r2, #0
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	bf18      	it	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	0692      	lsls	r2, r2, #26
 80041be:	d42b      	bmi.n	8004218 <_printf_common+0xb0>
 80041c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c4:	4649      	mov	r1, r9
 80041c6:	4638      	mov	r0, r7
 80041c8:	47c0      	blx	r8
 80041ca:	3001      	adds	r0, #1
 80041cc:	d01e      	beq.n	800420c <_printf_common+0xa4>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	68e5      	ldr	r5, [r4, #12]
 80041d2:	6832      	ldr	r2, [r6, #0]
 80041d4:	f003 0306 	and.w	r3, r3, #6
 80041d8:	2b04      	cmp	r3, #4
 80041da:	bf08      	it	eq
 80041dc:	1aad      	subeq	r5, r5, r2
 80041de:	68a3      	ldr	r3, [r4, #8]
 80041e0:	6922      	ldr	r2, [r4, #16]
 80041e2:	bf0c      	ite	eq
 80041e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041e8:	2500      	movne	r5, #0
 80041ea:	4293      	cmp	r3, r2
 80041ec:	bfc4      	itt	gt
 80041ee:	1a9b      	subgt	r3, r3, r2
 80041f0:	18ed      	addgt	r5, r5, r3
 80041f2:	2600      	movs	r6, #0
 80041f4:	341a      	adds	r4, #26
 80041f6:	42b5      	cmp	r5, r6
 80041f8:	d11a      	bne.n	8004230 <_printf_common+0xc8>
 80041fa:	2000      	movs	r0, #0
 80041fc:	e008      	b.n	8004210 <_printf_common+0xa8>
 80041fe:	2301      	movs	r3, #1
 8004200:	4652      	mov	r2, sl
 8004202:	4649      	mov	r1, r9
 8004204:	4638      	mov	r0, r7
 8004206:	47c0      	blx	r8
 8004208:	3001      	adds	r0, #1
 800420a:	d103      	bne.n	8004214 <_printf_common+0xac>
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004214:	3501      	adds	r5, #1
 8004216:	e7c6      	b.n	80041a6 <_printf_common+0x3e>
 8004218:	18e1      	adds	r1, r4, r3
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	2030      	movs	r0, #48	; 0x30
 800421e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004222:	4422      	add	r2, r4
 8004224:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004228:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800422c:	3302      	adds	r3, #2
 800422e:	e7c7      	b.n	80041c0 <_printf_common+0x58>
 8004230:	2301      	movs	r3, #1
 8004232:	4622      	mov	r2, r4
 8004234:	4649      	mov	r1, r9
 8004236:	4638      	mov	r0, r7
 8004238:	47c0      	blx	r8
 800423a:	3001      	adds	r0, #1
 800423c:	d0e6      	beq.n	800420c <_printf_common+0xa4>
 800423e:	3601      	adds	r6, #1
 8004240:	e7d9      	b.n	80041f6 <_printf_common+0x8e>
	...

08004244 <_printf_i>:
 8004244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	7e0f      	ldrb	r7, [r1, #24]
 800424a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800424c:	2f78      	cmp	r7, #120	; 0x78
 800424e:	4691      	mov	r9, r2
 8004250:	4680      	mov	r8, r0
 8004252:	460c      	mov	r4, r1
 8004254:	469a      	mov	sl, r3
 8004256:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800425a:	d807      	bhi.n	800426c <_printf_i+0x28>
 800425c:	2f62      	cmp	r7, #98	; 0x62
 800425e:	d80a      	bhi.n	8004276 <_printf_i+0x32>
 8004260:	2f00      	cmp	r7, #0
 8004262:	f000 80d8 	beq.w	8004416 <_printf_i+0x1d2>
 8004266:	2f58      	cmp	r7, #88	; 0x58
 8004268:	f000 80a3 	beq.w	80043b2 <_printf_i+0x16e>
 800426c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004270:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004274:	e03a      	b.n	80042ec <_printf_i+0xa8>
 8004276:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800427a:	2b15      	cmp	r3, #21
 800427c:	d8f6      	bhi.n	800426c <_printf_i+0x28>
 800427e:	a101      	add	r1, pc, #4	; (adr r1, 8004284 <_printf_i+0x40>)
 8004280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004284:	080042dd 	.word	0x080042dd
 8004288:	080042f1 	.word	0x080042f1
 800428c:	0800426d 	.word	0x0800426d
 8004290:	0800426d 	.word	0x0800426d
 8004294:	0800426d 	.word	0x0800426d
 8004298:	0800426d 	.word	0x0800426d
 800429c:	080042f1 	.word	0x080042f1
 80042a0:	0800426d 	.word	0x0800426d
 80042a4:	0800426d 	.word	0x0800426d
 80042a8:	0800426d 	.word	0x0800426d
 80042ac:	0800426d 	.word	0x0800426d
 80042b0:	080043fd 	.word	0x080043fd
 80042b4:	08004321 	.word	0x08004321
 80042b8:	080043df 	.word	0x080043df
 80042bc:	0800426d 	.word	0x0800426d
 80042c0:	0800426d 	.word	0x0800426d
 80042c4:	0800441f 	.word	0x0800441f
 80042c8:	0800426d 	.word	0x0800426d
 80042cc:	08004321 	.word	0x08004321
 80042d0:	0800426d 	.word	0x0800426d
 80042d4:	0800426d 	.word	0x0800426d
 80042d8:	080043e7 	.word	0x080043e7
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	1d1a      	adds	r2, r3, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	602a      	str	r2, [r5, #0]
 80042e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0a3      	b.n	8004438 <_printf_i+0x1f4>
 80042f0:	6820      	ldr	r0, [r4, #0]
 80042f2:	6829      	ldr	r1, [r5, #0]
 80042f4:	0606      	lsls	r6, r0, #24
 80042f6:	f101 0304 	add.w	r3, r1, #4
 80042fa:	d50a      	bpl.n	8004312 <_printf_i+0xce>
 80042fc:	680e      	ldr	r6, [r1, #0]
 80042fe:	602b      	str	r3, [r5, #0]
 8004300:	2e00      	cmp	r6, #0
 8004302:	da03      	bge.n	800430c <_printf_i+0xc8>
 8004304:	232d      	movs	r3, #45	; 0x2d
 8004306:	4276      	negs	r6, r6
 8004308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800430c:	485e      	ldr	r0, [pc, #376]	; (8004488 <_printf_i+0x244>)
 800430e:	230a      	movs	r3, #10
 8004310:	e019      	b.n	8004346 <_printf_i+0x102>
 8004312:	680e      	ldr	r6, [r1, #0]
 8004314:	602b      	str	r3, [r5, #0]
 8004316:	f010 0f40 	tst.w	r0, #64	; 0x40
 800431a:	bf18      	it	ne
 800431c:	b236      	sxthne	r6, r6
 800431e:	e7ef      	b.n	8004300 <_printf_i+0xbc>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	6820      	ldr	r0, [r4, #0]
 8004324:	1d19      	adds	r1, r3, #4
 8004326:	6029      	str	r1, [r5, #0]
 8004328:	0601      	lsls	r1, r0, #24
 800432a:	d501      	bpl.n	8004330 <_printf_i+0xec>
 800432c:	681e      	ldr	r6, [r3, #0]
 800432e:	e002      	b.n	8004336 <_printf_i+0xf2>
 8004330:	0646      	lsls	r6, r0, #25
 8004332:	d5fb      	bpl.n	800432c <_printf_i+0xe8>
 8004334:	881e      	ldrh	r6, [r3, #0]
 8004336:	4854      	ldr	r0, [pc, #336]	; (8004488 <_printf_i+0x244>)
 8004338:	2f6f      	cmp	r7, #111	; 0x6f
 800433a:	bf0c      	ite	eq
 800433c:	2308      	moveq	r3, #8
 800433e:	230a      	movne	r3, #10
 8004340:	2100      	movs	r1, #0
 8004342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004346:	6865      	ldr	r5, [r4, #4]
 8004348:	60a5      	str	r5, [r4, #8]
 800434a:	2d00      	cmp	r5, #0
 800434c:	bfa2      	ittt	ge
 800434e:	6821      	ldrge	r1, [r4, #0]
 8004350:	f021 0104 	bicge.w	r1, r1, #4
 8004354:	6021      	strge	r1, [r4, #0]
 8004356:	b90e      	cbnz	r6, 800435c <_printf_i+0x118>
 8004358:	2d00      	cmp	r5, #0
 800435a:	d04d      	beq.n	80043f8 <_printf_i+0x1b4>
 800435c:	4615      	mov	r5, r2
 800435e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004362:	fb03 6711 	mls	r7, r3, r1, r6
 8004366:	5dc7      	ldrb	r7, [r0, r7]
 8004368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800436c:	4637      	mov	r7, r6
 800436e:	42bb      	cmp	r3, r7
 8004370:	460e      	mov	r6, r1
 8004372:	d9f4      	bls.n	800435e <_printf_i+0x11a>
 8004374:	2b08      	cmp	r3, #8
 8004376:	d10b      	bne.n	8004390 <_printf_i+0x14c>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	07de      	lsls	r6, r3, #31
 800437c:	d508      	bpl.n	8004390 <_printf_i+0x14c>
 800437e:	6923      	ldr	r3, [r4, #16]
 8004380:	6861      	ldr	r1, [r4, #4]
 8004382:	4299      	cmp	r1, r3
 8004384:	bfde      	ittt	le
 8004386:	2330      	movle	r3, #48	; 0x30
 8004388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800438c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004390:	1b52      	subs	r2, r2, r5
 8004392:	6122      	str	r2, [r4, #16]
 8004394:	f8cd a000 	str.w	sl, [sp]
 8004398:	464b      	mov	r3, r9
 800439a:	aa03      	add	r2, sp, #12
 800439c:	4621      	mov	r1, r4
 800439e:	4640      	mov	r0, r8
 80043a0:	f7ff fee2 	bl	8004168 <_printf_common>
 80043a4:	3001      	adds	r0, #1
 80043a6:	d14c      	bne.n	8004442 <_printf_i+0x1fe>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	b004      	add	sp, #16
 80043ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b2:	4835      	ldr	r0, [pc, #212]	; (8004488 <_printf_i+0x244>)
 80043b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80043b8:	6829      	ldr	r1, [r5, #0]
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80043c0:	6029      	str	r1, [r5, #0]
 80043c2:	061d      	lsls	r5, r3, #24
 80043c4:	d514      	bpl.n	80043f0 <_printf_i+0x1ac>
 80043c6:	07df      	lsls	r7, r3, #31
 80043c8:	bf44      	itt	mi
 80043ca:	f043 0320 	orrmi.w	r3, r3, #32
 80043ce:	6023      	strmi	r3, [r4, #0]
 80043d0:	b91e      	cbnz	r6, 80043da <_printf_i+0x196>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	f023 0320 	bic.w	r3, r3, #32
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	2310      	movs	r3, #16
 80043dc:	e7b0      	b.n	8004340 <_printf_i+0xfc>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	f043 0320 	orr.w	r3, r3, #32
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	2378      	movs	r3, #120	; 0x78
 80043e8:	4828      	ldr	r0, [pc, #160]	; (800448c <_printf_i+0x248>)
 80043ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ee:	e7e3      	b.n	80043b8 <_printf_i+0x174>
 80043f0:	0659      	lsls	r1, r3, #25
 80043f2:	bf48      	it	mi
 80043f4:	b2b6      	uxthmi	r6, r6
 80043f6:	e7e6      	b.n	80043c6 <_printf_i+0x182>
 80043f8:	4615      	mov	r5, r2
 80043fa:	e7bb      	b.n	8004374 <_printf_i+0x130>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	6826      	ldr	r6, [r4, #0]
 8004400:	6961      	ldr	r1, [r4, #20]
 8004402:	1d18      	adds	r0, r3, #4
 8004404:	6028      	str	r0, [r5, #0]
 8004406:	0635      	lsls	r5, r6, #24
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	d501      	bpl.n	8004410 <_printf_i+0x1cc>
 800440c:	6019      	str	r1, [r3, #0]
 800440e:	e002      	b.n	8004416 <_printf_i+0x1d2>
 8004410:	0670      	lsls	r0, r6, #25
 8004412:	d5fb      	bpl.n	800440c <_printf_i+0x1c8>
 8004414:	8019      	strh	r1, [r3, #0]
 8004416:	2300      	movs	r3, #0
 8004418:	6123      	str	r3, [r4, #16]
 800441a:	4615      	mov	r5, r2
 800441c:	e7ba      	b.n	8004394 <_printf_i+0x150>
 800441e:	682b      	ldr	r3, [r5, #0]
 8004420:	1d1a      	adds	r2, r3, #4
 8004422:	602a      	str	r2, [r5, #0]
 8004424:	681d      	ldr	r5, [r3, #0]
 8004426:	6862      	ldr	r2, [r4, #4]
 8004428:	2100      	movs	r1, #0
 800442a:	4628      	mov	r0, r5
 800442c:	f7fb fee0 	bl	80001f0 <memchr>
 8004430:	b108      	cbz	r0, 8004436 <_printf_i+0x1f2>
 8004432:	1b40      	subs	r0, r0, r5
 8004434:	6060      	str	r0, [r4, #4]
 8004436:	6863      	ldr	r3, [r4, #4]
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	2300      	movs	r3, #0
 800443c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004440:	e7a8      	b.n	8004394 <_printf_i+0x150>
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	462a      	mov	r2, r5
 8004446:	4649      	mov	r1, r9
 8004448:	4640      	mov	r0, r8
 800444a:	47d0      	blx	sl
 800444c:	3001      	adds	r0, #1
 800444e:	d0ab      	beq.n	80043a8 <_printf_i+0x164>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	079b      	lsls	r3, r3, #30
 8004454:	d413      	bmi.n	800447e <_printf_i+0x23a>
 8004456:	68e0      	ldr	r0, [r4, #12]
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	4298      	cmp	r0, r3
 800445c:	bfb8      	it	lt
 800445e:	4618      	movlt	r0, r3
 8004460:	e7a4      	b.n	80043ac <_printf_i+0x168>
 8004462:	2301      	movs	r3, #1
 8004464:	4632      	mov	r2, r6
 8004466:	4649      	mov	r1, r9
 8004468:	4640      	mov	r0, r8
 800446a:	47d0      	blx	sl
 800446c:	3001      	adds	r0, #1
 800446e:	d09b      	beq.n	80043a8 <_printf_i+0x164>
 8004470:	3501      	adds	r5, #1
 8004472:	68e3      	ldr	r3, [r4, #12]
 8004474:	9903      	ldr	r1, [sp, #12]
 8004476:	1a5b      	subs	r3, r3, r1
 8004478:	42ab      	cmp	r3, r5
 800447a:	dcf2      	bgt.n	8004462 <_printf_i+0x21e>
 800447c:	e7eb      	b.n	8004456 <_printf_i+0x212>
 800447e:	2500      	movs	r5, #0
 8004480:	f104 0619 	add.w	r6, r4, #25
 8004484:	e7f5      	b.n	8004472 <_printf_i+0x22e>
 8004486:	bf00      	nop
 8004488:	08004a4d 	.word	0x08004a4d
 800448c:	08004a5e 	.word	0x08004a5e

08004490 <memcpy>:
 8004490:	440a      	add	r2, r1
 8004492:	4291      	cmp	r1, r2
 8004494:	f100 33ff 	add.w	r3, r0, #4294967295
 8004498:	d100      	bne.n	800449c <memcpy+0xc>
 800449a:	4770      	bx	lr
 800449c:	b510      	push	{r4, lr}
 800449e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044a6:	4291      	cmp	r1, r2
 80044a8:	d1f9      	bne.n	800449e <memcpy+0xe>
 80044aa:	bd10      	pop	{r4, pc}

080044ac <memmove>:
 80044ac:	4288      	cmp	r0, r1
 80044ae:	b510      	push	{r4, lr}
 80044b0:	eb01 0402 	add.w	r4, r1, r2
 80044b4:	d902      	bls.n	80044bc <memmove+0x10>
 80044b6:	4284      	cmp	r4, r0
 80044b8:	4623      	mov	r3, r4
 80044ba:	d807      	bhi.n	80044cc <memmove+0x20>
 80044bc:	1e43      	subs	r3, r0, #1
 80044be:	42a1      	cmp	r1, r4
 80044c0:	d008      	beq.n	80044d4 <memmove+0x28>
 80044c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ca:	e7f8      	b.n	80044be <memmove+0x12>
 80044cc:	4402      	add	r2, r0
 80044ce:	4601      	mov	r1, r0
 80044d0:	428a      	cmp	r2, r1
 80044d2:	d100      	bne.n	80044d6 <memmove+0x2a>
 80044d4:	bd10      	pop	{r4, pc}
 80044d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044de:	e7f7      	b.n	80044d0 <memmove+0x24>

080044e0 <_free_r>:
 80044e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044e2:	2900      	cmp	r1, #0
 80044e4:	d044      	beq.n	8004570 <_free_r+0x90>
 80044e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044ea:	9001      	str	r0, [sp, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f1a1 0404 	sub.w	r4, r1, #4
 80044f2:	bfb8      	it	lt
 80044f4:	18e4      	addlt	r4, r4, r3
 80044f6:	f000 f913 	bl	8004720 <__malloc_lock>
 80044fa:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <_free_r+0x94>)
 80044fc:	9801      	ldr	r0, [sp, #4]
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	b933      	cbnz	r3, 8004510 <_free_r+0x30>
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	6014      	str	r4, [r2, #0]
 8004506:	b003      	add	sp, #12
 8004508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800450c:	f000 b90e 	b.w	800472c <__malloc_unlock>
 8004510:	42a3      	cmp	r3, r4
 8004512:	d908      	bls.n	8004526 <_free_r+0x46>
 8004514:	6825      	ldr	r5, [r4, #0]
 8004516:	1961      	adds	r1, r4, r5
 8004518:	428b      	cmp	r3, r1
 800451a:	bf01      	itttt	eq
 800451c:	6819      	ldreq	r1, [r3, #0]
 800451e:	685b      	ldreq	r3, [r3, #4]
 8004520:	1949      	addeq	r1, r1, r5
 8004522:	6021      	streq	r1, [r4, #0]
 8004524:	e7ed      	b.n	8004502 <_free_r+0x22>
 8004526:	461a      	mov	r2, r3
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	b10b      	cbz	r3, 8004530 <_free_r+0x50>
 800452c:	42a3      	cmp	r3, r4
 800452e:	d9fa      	bls.n	8004526 <_free_r+0x46>
 8004530:	6811      	ldr	r1, [r2, #0]
 8004532:	1855      	adds	r5, r2, r1
 8004534:	42a5      	cmp	r5, r4
 8004536:	d10b      	bne.n	8004550 <_free_r+0x70>
 8004538:	6824      	ldr	r4, [r4, #0]
 800453a:	4421      	add	r1, r4
 800453c:	1854      	adds	r4, r2, r1
 800453e:	42a3      	cmp	r3, r4
 8004540:	6011      	str	r1, [r2, #0]
 8004542:	d1e0      	bne.n	8004506 <_free_r+0x26>
 8004544:	681c      	ldr	r4, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	6053      	str	r3, [r2, #4]
 800454a:	4421      	add	r1, r4
 800454c:	6011      	str	r1, [r2, #0]
 800454e:	e7da      	b.n	8004506 <_free_r+0x26>
 8004550:	d902      	bls.n	8004558 <_free_r+0x78>
 8004552:	230c      	movs	r3, #12
 8004554:	6003      	str	r3, [r0, #0]
 8004556:	e7d6      	b.n	8004506 <_free_r+0x26>
 8004558:	6825      	ldr	r5, [r4, #0]
 800455a:	1961      	adds	r1, r4, r5
 800455c:	428b      	cmp	r3, r1
 800455e:	bf04      	itt	eq
 8004560:	6819      	ldreq	r1, [r3, #0]
 8004562:	685b      	ldreq	r3, [r3, #4]
 8004564:	6063      	str	r3, [r4, #4]
 8004566:	bf04      	itt	eq
 8004568:	1949      	addeq	r1, r1, r5
 800456a:	6021      	streq	r1, [r4, #0]
 800456c:	6054      	str	r4, [r2, #4]
 800456e:	e7ca      	b.n	8004506 <_free_r+0x26>
 8004570:	b003      	add	sp, #12
 8004572:	bd30      	pop	{r4, r5, pc}
 8004574:	200001bc 	.word	0x200001bc

08004578 <sbrk_aligned>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4e0e      	ldr	r6, [pc, #56]	; (80045b4 <sbrk_aligned+0x3c>)
 800457c:	460c      	mov	r4, r1
 800457e:	6831      	ldr	r1, [r6, #0]
 8004580:	4605      	mov	r5, r0
 8004582:	b911      	cbnz	r1, 800458a <sbrk_aligned+0x12>
 8004584:	f000 f8bc 	bl	8004700 <_sbrk_r>
 8004588:	6030      	str	r0, [r6, #0]
 800458a:	4621      	mov	r1, r4
 800458c:	4628      	mov	r0, r5
 800458e:	f000 f8b7 	bl	8004700 <_sbrk_r>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d00a      	beq.n	80045ac <sbrk_aligned+0x34>
 8004596:	1cc4      	adds	r4, r0, #3
 8004598:	f024 0403 	bic.w	r4, r4, #3
 800459c:	42a0      	cmp	r0, r4
 800459e:	d007      	beq.n	80045b0 <sbrk_aligned+0x38>
 80045a0:	1a21      	subs	r1, r4, r0
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 f8ac 	bl	8004700 <_sbrk_r>
 80045a8:	3001      	adds	r0, #1
 80045aa:	d101      	bne.n	80045b0 <sbrk_aligned+0x38>
 80045ac:	f04f 34ff 	mov.w	r4, #4294967295
 80045b0:	4620      	mov	r0, r4
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	200001c0 	.word	0x200001c0

080045b8 <_malloc_r>:
 80045b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045bc:	1ccd      	adds	r5, r1, #3
 80045be:	f025 0503 	bic.w	r5, r5, #3
 80045c2:	3508      	adds	r5, #8
 80045c4:	2d0c      	cmp	r5, #12
 80045c6:	bf38      	it	cc
 80045c8:	250c      	movcc	r5, #12
 80045ca:	2d00      	cmp	r5, #0
 80045cc:	4607      	mov	r7, r0
 80045ce:	db01      	blt.n	80045d4 <_malloc_r+0x1c>
 80045d0:	42a9      	cmp	r1, r5
 80045d2:	d905      	bls.n	80045e0 <_malloc_r+0x28>
 80045d4:	230c      	movs	r3, #12
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	2600      	movs	r6, #0
 80045da:	4630      	mov	r0, r6
 80045dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e0:	4e2e      	ldr	r6, [pc, #184]	; (800469c <_malloc_r+0xe4>)
 80045e2:	f000 f89d 	bl	8004720 <__malloc_lock>
 80045e6:	6833      	ldr	r3, [r6, #0]
 80045e8:	461c      	mov	r4, r3
 80045ea:	bb34      	cbnz	r4, 800463a <_malloc_r+0x82>
 80045ec:	4629      	mov	r1, r5
 80045ee:	4638      	mov	r0, r7
 80045f0:	f7ff ffc2 	bl	8004578 <sbrk_aligned>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	4604      	mov	r4, r0
 80045f8:	d14d      	bne.n	8004696 <_malloc_r+0xde>
 80045fa:	6834      	ldr	r4, [r6, #0]
 80045fc:	4626      	mov	r6, r4
 80045fe:	2e00      	cmp	r6, #0
 8004600:	d140      	bne.n	8004684 <_malloc_r+0xcc>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	4631      	mov	r1, r6
 8004606:	4638      	mov	r0, r7
 8004608:	eb04 0803 	add.w	r8, r4, r3
 800460c:	f000 f878 	bl	8004700 <_sbrk_r>
 8004610:	4580      	cmp	r8, r0
 8004612:	d13a      	bne.n	800468a <_malloc_r+0xd2>
 8004614:	6821      	ldr	r1, [r4, #0]
 8004616:	3503      	adds	r5, #3
 8004618:	1a6d      	subs	r5, r5, r1
 800461a:	f025 0503 	bic.w	r5, r5, #3
 800461e:	3508      	adds	r5, #8
 8004620:	2d0c      	cmp	r5, #12
 8004622:	bf38      	it	cc
 8004624:	250c      	movcc	r5, #12
 8004626:	4629      	mov	r1, r5
 8004628:	4638      	mov	r0, r7
 800462a:	f7ff ffa5 	bl	8004578 <sbrk_aligned>
 800462e:	3001      	adds	r0, #1
 8004630:	d02b      	beq.n	800468a <_malloc_r+0xd2>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	442b      	add	r3, r5
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	e00e      	b.n	8004658 <_malloc_r+0xa0>
 800463a:	6822      	ldr	r2, [r4, #0]
 800463c:	1b52      	subs	r2, r2, r5
 800463e:	d41e      	bmi.n	800467e <_malloc_r+0xc6>
 8004640:	2a0b      	cmp	r2, #11
 8004642:	d916      	bls.n	8004672 <_malloc_r+0xba>
 8004644:	1961      	adds	r1, r4, r5
 8004646:	42a3      	cmp	r3, r4
 8004648:	6025      	str	r5, [r4, #0]
 800464a:	bf18      	it	ne
 800464c:	6059      	strne	r1, [r3, #4]
 800464e:	6863      	ldr	r3, [r4, #4]
 8004650:	bf08      	it	eq
 8004652:	6031      	streq	r1, [r6, #0]
 8004654:	5162      	str	r2, [r4, r5]
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	4638      	mov	r0, r7
 800465a:	f104 060b 	add.w	r6, r4, #11
 800465e:	f000 f865 	bl	800472c <__malloc_unlock>
 8004662:	f026 0607 	bic.w	r6, r6, #7
 8004666:	1d23      	adds	r3, r4, #4
 8004668:	1af2      	subs	r2, r6, r3
 800466a:	d0b6      	beq.n	80045da <_malloc_r+0x22>
 800466c:	1b9b      	subs	r3, r3, r6
 800466e:	50a3      	str	r3, [r4, r2]
 8004670:	e7b3      	b.n	80045da <_malloc_r+0x22>
 8004672:	6862      	ldr	r2, [r4, #4]
 8004674:	42a3      	cmp	r3, r4
 8004676:	bf0c      	ite	eq
 8004678:	6032      	streq	r2, [r6, #0]
 800467a:	605a      	strne	r2, [r3, #4]
 800467c:	e7ec      	b.n	8004658 <_malloc_r+0xa0>
 800467e:	4623      	mov	r3, r4
 8004680:	6864      	ldr	r4, [r4, #4]
 8004682:	e7b2      	b.n	80045ea <_malloc_r+0x32>
 8004684:	4634      	mov	r4, r6
 8004686:	6876      	ldr	r6, [r6, #4]
 8004688:	e7b9      	b.n	80045fe <_malloc_r+0x46>
 800468a:	230c      	movs	r3, #12
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4638      	mov	r0, r7
 8004690:	f000 f84c 	bl	800472c <__malloc_unlock>
 8004694:	e7a1      	b.n	80045da <_malloc_r+0x22>
 8004696:	6025      	str	r5, [r4, #0]
 8004698:	e7de      	b.n	8004658 <_malloc_r+0xa0>
 800469a:	bf00      	nop
 800469c:	200001bc 	.word	0x200001bc

080046a0 <_realloc_r>:
 80046a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a4:	4680      	mov	r8, r0
 80046a6:	4614      	mov	r4, r2
 80046a8:	460e      	mov	r6, r1
 80046aa:	b921      	cbnz	r1, 80046b6 <_realloc_r+0x16>
 80046ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	4611      	mov	r1, r2
 80046b2:	f7ff bf81 	b.w	80045b8 <_malloc_r>
 80046b6:	b92a      	cbnz	r2, 80046c4 <_realloc_r+0x24>
 80046b8:	f7ff ff12 	bl	80044e0 <_free_r>
 80046bc:	4625      	mov	r5, r4
 80046be:	4628      	mov	r0, r5
 80046c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c4:	f000 f838 	bl	8004738 <_malloc_usable_size_r>
 80046c8:	4284      	cmp	r4, r0
 80046ca:	4607      	mov	r7, r0
 80046cc:	d802      	bhi.n	80046d4 <_realloc_r+0x34>
 80046ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046d2:	d812      	bhi.n	80046fa <_realloc_r+0x5a>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4640      	mov	r0, r8
 80046d8:	f7ff ff6e 	bl	80045b8 <_malloc_r>
 80046dc:	4605      	mov	r5, r0
 80046de:	2800      	cmp	r0, #0
 80046e0:	d0ed      	beq.n	80046be <_realloc_r+0x1e>
 80046e2:	42bc      	cmp	r4, r7
 80046e4:	4622      	mov	r2, r4
 80046e6:	4631      	mov	r1, r6
 80046e8:	bf28      	it	cs
 80046ea:	463a      	movcs	r2, r7
 80046ec:	f7ff fed0 	bl	8004490 <memcpy>
 80046f0:	4631      	mov	r1, r6
 80046f2:	4640      	mov	r0, r8
 80046f4:	f7ff fef4 	bl	80044e0 <_free_r>
 80046f8:	e7e1      	b.n	80046be <_realloc_r+0x1e>
 80046fa:	4635      	mov	r5, r6
 80046fc:	e7df      	b.n	80046be <_realloc_r+0x1e>
	...

08004700 <_sbrk_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d06      	ldr	r5, [pc, #24]	; (800471c <_sbrk_r+0x1c>)
 8004704:	2300      	movs	r3, #0
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	602b      	str	r3, [r5, #0]
 800470c:	f7fc fd1c 	bl	8001148 <_sbrk>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d102      	bne.n	800471a <_sbrk_r+0x1a>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	b103      	cbz	r3, 800471a <_sbrk_r+0x1a>
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	200001c4 	.word	0x200001c4

08004720 <__malloc_lock>:
 8004720:	4801      	ldr	r0, [pc, #4]	; (8004728 <__malloc_lock+0x8>)
 8004722:	f000 b811 	b.w	8004748 <__retarget_lock_acquire_recursive>
 8004726:	bf00      	nop
 8004728:	200001c8 	.word	0x200001c8

0800472c <__malloc_unlock>:
 800472c:	4801      	ldr	r0, [pc, #4]	; (8004734 <__malloc_unlock+0x8>)
 800472e:	f000 b80c 	b.w	800474a <__retarget_lock_release_recursive>
 8004732:	bf00      	nop
 8004734:	200001c8 	.word	0x200001c8

08004738 <_malloc_usable_size_r>:
 8004738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473c:	1f18      	subs	r0, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfbc      	itt	lt
 8004742:	580b      	ldrlt	r3, [r1, r0]
 8004744:	18c0      	addlt	r0, r0, r3
 8004746:	4770      	bx	lr

08004748 <__retarget_lock_acquire_recursive>:
 8004748:	4770      	bx	lr

0800474a <__retarget_lock_release_recursive>:
 800474a:	4770      	bx	lr

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
